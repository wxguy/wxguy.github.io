[ { "title": "Install MS Office any Version on RHEL Based Distros", "url": "/posts/install-ms-office-any-version-on-rhel-alma-linux-based-distros/", "categories": "Tutorial", "tags": "rhel, linux, alma-linux, ms-office", "date": "2024-12-26 04:30:00 +0000", "snippet": "Why Separate Post?This is a follow-up post of https://wxguy.in/posts/make-rhel-alma-linux-8-as-perfect-desktop where I did not explain about installing MS Office on RHEL based distros. The post was a little lengthy and hence I felt that it required a separate post. In addition, after I published the post at https://wxguy.in/posts/how-tot-install-ms-office-on-linux, there have been numerous changes in the winapps application. Just to remind you that we will be installing a tiny version of Windows 11 using Docker and configure to access MS Office using https://github.com/winapps-org/winapps. I have tested an MS Office 2021 on Alma Linux 8.10 and the process would be the same for all RHEL-based ditros with version 8.x. If you use any other version, you may have to adjust certain steps accordingly.Install and Enable DockerWinapps, support docker, podman or libvirt for installing Windows Virtual Machine. However, they recommend using either podman or docker. We will be using docker method in this tutrial. Though, there is version of docker available in repo, we will use the latest stable version from official website of docker.Enable official docker repo.sudo dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repoInstall docker with compose pluginsudo dnf install docker-ce docker-ce-cli containerd.ioCheck if docker is successfully installed.$ docker --versionDocker version 26.1.3, build b72abbbAlso, check the docker-compose through version info.$ docker-compose --versionDocker Compose version v2.32.1Add docker to the user group.sudo usermod -a -G docker $USERStart and enable docker.sudo systemctl start dockersudo systemctl enable dockerWhen I ran docker compose for the first time, I got a permission error as shown below.&quot;permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: &quot;Some technical documentation recommends a reboot before using docker. However, I gave necessary permission with following command that solver the issue.sudo chmod 777 /var/run/docker.sockInstall Windows11 Using DockerThe latest version of winapps requires FreeRDP version 3 or above. Before, we install system dependencies, lets check the version information of freerdp package available in repo using following command.$ dnf info freerdp Available PackagesName : freerdpEpoch : 2Version : 2.11.7Release : 1.el8Architecture : srcSize : 7.0 MSource : NoneRepository : copr:copr.fedorainfracloud.org:mlampe:freerdpSummary : Free implementation of the Remote Desktop Protocol (RDP)URL : http://www.freerdp.com/License : ASL 2.0Description : The xfreerdp &amp;amp; wlfreerdp Remote Desktop Protocol (RDP) clients : from the FreeRDP project. : : xfreerdp &amp;amp; wlfreerdp can connect to RDP servers such as Microsoft : Windows machines, xrdp and VirtualBox.It is clearly evedent that the freerdp available in repo will not work in our case. There is an option to install FreeRDP using flatpak. However, due to known bug, it won’t work either. The solution is to compile the freerdp programme in our syste. The FreeRDP compilation process is little complecated. I have written a seperate post on the same at https://wxguy.in/posts/compile-freerdp-on-rhel-alma-linux-8.YOU MUST COMPILE LATEST FREERDP BEFORE PROCEEDING FURTHER.Once freerdp is compiled and installed, we can install other system dependencies.sudo dnf install -y dialog iproute libnotify nmap-ncatClone winapps repo to local filesysem and move to it. I use home directory as it is easy to navigate through directories.git clone https://github.com/winapps-org/winapps ~/cd winappsThe complete setup preference of client VM are provided as a configuration file called compose.yaml. This compose.yaml is also part of cloned repo. Check if it is avalibale.$ ls com* ─╯compose.yamlEdit compose.yaml file as per your need. I have only changed USERNAME and PASSWORD section. Rest all I have kept as it is. Sample of my configuration is as shown.# For documentation, FAQ, additional configuration options and technical help, visit: https://github.com/dockur/windowsname: &quot;winapps&quot; # Docker Compose Project Name.volumes: # Create Volume &#39;data&#39;. # Located @ &#39;/var/lib/docker/volumes/winapps_data/_data&#39; (Docker). # Located @ &#39;/var/lib/containers/storage/volumes/winapps_data/_data&#39; or &#39;~/.local/share/containers/storage/volumes/winapps_data/_data&#39; (Podman). data:services: windows: image: ghcr.io/dockur/windows:latest container_name: WinApps # Created Docker VM Name. environment: # Version of Windows to configure. For valid options, visit: # https://github.com/dockur/windows?tab=readme-ov-file#how-do-i-select-the-windows-version # https://github.com/dockur/windows?tab=readme-ov-file#how-do-i-install-a-custom-image VERSION: &quot;tiny11&quot; RAM_SIZE: &quot;4G&quot; # RAM allocated to the Windows VM. CPU_CORES: &quot;4&quot; # CPU cores allocated to the Windows VM. DISK_SIZE: &quot;64G&quot; # Size of the primary hard disk. #DISK2_SIZE: &quot;32G&quot; # Uncomment to add an additional hard disk to the Windows VM. Ensure it is mounted as a volume below. USERNAME: &quot;sundar&quot; # Uncomment to set a custom Windows username. The default is &#39;Docker&#39;. PASSWORD: &quot;Pa$$w0rd&quot; # Uncomment to set a password for the Windows user. There is no default password. HOME: &quot;${HOME}&quot; # Set path to Linux user home folder. privileged: true # Grant the Windows VM extended privileges. ports: - 8006:8006 # Map &#39;8006&#39; on Linux host to &#39;8006&#39; on Windows VM --&amp;gt; For VNC Web Interface @ http://127.0.0.1:8006. - 3389:3389/tcp # Map &#39;3389&#39; on Linux host to &#39;3389&#39; on Windows VM --&amp;gt; For Remote Desktop Protocol (RDP). - 3389:3389/udp # Map &#39;3389&#39; on Linux host to &#39;3389&#39; on Windows VM --&amp;gt; For Remote Desktop Protocol (RDP). stop_grace_period: 120s # Wait 120 seconds before sending SIGTERM when attempting to shut down the Windows VM. restart: on-failure # Restart the Windows VM if the exit code indicates an error. volumes: - data:/storage # Mount volume &#39;data&#39; to use as Windows &#39;C:&#39; drive. - ${HOME}:/shared # Mount Linux user home directory @ &#39;\\\\host.lan\\Data&#39;. #- /path/to/second/hard/disk:/storage2 # Uncomment to mount the second hard disk within the Windows VM. Ensure &#39;DISK2_SIZE&#39; is specified above. - ./oem:/oem # Enables automatic post-install execution of &#39;oem/install.bat&#39;, applying Windows registry modifications contained within &#39;oem/RDPApps.reg&#39;. #- /path/to/windows/install/media.iso:/custom.iso # Uncomment to use a custom Windows ISO. If specified, &#39;VERSION&#39; (e.g. &#39;tiny11&#39;) will be ignored. devices: - /dev/kvm # Enable KVM. #- /dev/sdX:/disk1 # Uncomment to mount a disk directly within the Windows VM (Note: &#39;disk1&#39; will be mounted as the main drive). #- /dev/sdY:/disk2 # Uncomment to mount a disk directly within the Windows VM (Note: &#39;disk2&#39; and higher will be mounted as secondary drives).After editing the compose.yaml file, it is time to install Windows 11 using docker compose.docker compose --file ~/winapps/compose.yaml upThis will show progress as indicated below.[+] Running 7/7 ✔ windows Pulled 28.2s ✔ aebe871ddbf7 Pull complete 22.5s ✔ debe2ff5bb35 Pull complete 25.0s ✔ df72794a06d8 Pull complete 25.0s ✔ 3ea98e7a316a Pull complete 25.1s ✔ 3c169cf00d7d Pull complete 25.2s ✔ b1788d24960b Pull complete 25.2s [+] Running 3/3 ✔ Network winapps_default Created 0.3s ✔ Volume &quot;winapps_data&quot; Created 0.0s ✔ Container WinApps Created 1.1s Attaching to WinAppsWinApps | ❯ Starting Windows for Docker v4.07...WinApps | ❯ For support visit https://github.com/dockur/windowsWinApps | ❯ CPU: Intel Core i7 8550U | RAM: 10/16 GB | DISK: 60 GB (xfs) | KERNEL: 4.18.0-553.30.1.el8_10.x86_64...WinApps | WinApps | ❯ Downloading Tiny 11 from archive.org...WinApps | WinApps | 0K ........ ........ ........ ........ 0% 277K 3h40mWinApps | 32768K ........ ........ ........ ........ 1% 360K 3h13mWinApps | 65536K ........ ........ ........ ........ 2% 449K 2h52m...It took about three hours for me to download Tiny version of Windows 11 that has a size of around 5GB. Probably it may be due to the fact that it is downloading ISO from archive.org. You can monitor the Windows 11 installation progress using browser using URL http://127.0.0.1:8006.After installing Windows, comment out the following lines in the compose.yaml file by prepending a ‘#’:- ./oem:/oemand copy the modified ~/winapps/compose.yaml file to ~/.config/winapps/compose.yaml.cp ~/winapps/compose.yaml ~/.config/winapps/compose.yamlFinally, ensure that the new configuration is applied by running the following.docker compose --file ~/.config/winapps/compose.yaml downdocker compose --file ~/.config/winapps/compose.yaml upIf some of the procedure listed above is not working, you can refer to official documentation at https://github.com/winapps-org/winapps/blob/main/docs/docker.md.Download, Install and Activate MS Office 2011Once Windows 11 VM is successfully installed, Install MS Office 20XX in client system. I used following method to install MS Office 2011. The post I referred says it is legal to do that. Please let me know if it violates any sort of license, I will remove this section.Download copy of 2011 to ~/Downloads directory from Linux host.wget https://c2rsetup.officeapps.live.com/c2r/download.aspx\\?ProductreleaseID\\=ProPlus2021Retail\\&amp;amp;platform\\=x64\\&amp;amp;language\\=en-us\\&amp;amp;version\\=O16GA -P ~/Downloads -O ms_office_setup.exeLogin to Windows 11 and copy ms_office_setup.exe file from Linux file system to Downloads of Windows 11 and start the installation. This is required as *.exe files can be executed only from Windows filesystem.The activation code shown below is also taken from another of the GitHub repo. Execute all lines of command at one go in Cmd window with Admin privilege on Windows 11 VM.if exist &quot;C:\\Program Files\\Microsoft Office\\Office16\\ospp.vbs&quot; cd /d &quot;C:\\Program Files\\Microsoft Office\\Office16&quot;if exist &quot;C:\\Program Files (x86)\\Microsoft Office\\Office16\\ospp.vbs&quot; cd /d &quot;C:\\Program Files (x86)\\Microsoft Office\\Office16&quot;for /f %x in (&#39;dir /b ..\\root\\Licenses16\\ProPlus2021VL_KMS*.xrm-ms&#39;) do cscript ospp.vbs /inslic:&quot;..\\root\\Licenses16\\%x&quot;cscript ospp.vbs /inpkey:FXYTK-NJJ8C-GB6DW-3DYQT-6F7THcscript ospp.vbs /sethst:kms.msgang.comcscript ospp.vbs /actpauseOnce MS Office is installed on Windows 11 you must logout.Configure WinappsBefore installing winapps, we must create a configuration file at ~/.config/winapps/winapps.conf with following content. The username and password values should be exactly what we have used in compose.yaml file. In my case, I changed only RDP_USER and RDP_PASS.################################### WINAPPS CONFIGURATION FILE #################################### INSTRUCTIONS# - Leading and trailing whitespace are ignored.# - Empty lines are ignored.# - Lines starting with &#39;#&#39; are ignored.# - All characters following a &#39;#&#39; are ignored.# [WINDOWS USERNAME]RDP_USER=&quot;sundar&quot;# [WINDOWS PASSWORD]# NOTES:# - If using FreeRDP v3.9.0 or greater, you *have* to set a passwordRDP_PASS=&quot;Pa$$w0rd&quot;# [WINDOWS DOMAIN]# DEFAULT VALUE: &#39;&#39; (BLANK)RDP_DOMAIN=&quot;&quot;# [WINDOWS IPV4 ADDRESS]# NOTES:# - If using &#39;libvirt&#39;, &#39;RDP_IP&#39; will be determined by WinApps at runtime if left unspecified.# DEFAULT VALUE:# - &#39;docker&#39;: &#39;127.0.0.1&#39;# - &#39;podman&#39;: &#39;127.0.0.1&#39;# - &#39;libvirt&#39;: &#39;&#39; (BLANK)RDP_IP=&quot;&quot;# [WINAPPS BACKEND]# DEFAULT VALUE: &#39;docker&#39;# VALID VALUES:# - &#39;docker&#39;# - &#39;podman&#39;# - &#39;libvirt&#39;# - &#39;manual&#39;WAFLAVOR=&quot;docker&quot;# [DISPLAY SCALING FACTOR]# NOTES:# - If an unsupported value is specified, a warning will be displayed.# - If an unsupported value is specified, WinApps will use the closest supported value.# DEFAULT VALUE: &#39;100&#39;# VALID VALUES:# - &#39;100&#39;# - &#39;140&#39;# - &#39;180&#39;RDP_SCALE=&quot;100&quot;# [ADDITIONAL FREERDP FLAGS &amp;amp; ARGUMENTS]# NOTES:# - You can try adding /network:lan to these flags in order to increase performance, however, some users have faced issues with this.# DEFAULT VALUE: &#39;/cert:tofu /sound /microphone&#39;# VALID VALUES: See https://github.com/awakecoding/FreeRDP-Manuals/blob/master/User/FreeRDP-User-Manual.markdownRDP_FLAGS=&quot;/cert:tofu /sound /microphone&quot;# [MULTIPLE MONITORS]# NOTES:# - If enabled, a FreeRDP bug *might* produce a black screen.# DEFAULT VALUE: &#39;false&#39;# VALID VALUES:# - &#39;true&#39;# - &#39;false&#39;MULTIMON=&quot;false&quot;# [DEBUG WINAPPS]# NOTES:# - Creates and appends to ~/.local/share/winapps/winapps.log when running WinApps.# DEFAULT VALUE: &#39;true&#39;# VALID VALUES:# - &#39;true&#39;# - &#39;false&#39;DEBUG=&quot;true&quot;# [AUTOMATICALLY PAUSE WINDOWS]# NOTES:# - This is currently INCOMPATIBLE with &#39;docker&#39; and &#39;manual&#39;.# - See https://github.com/dockur/windows/issues/674# DEFAULT VALUE: &#39;off&#39;# VALID VALUES:# - &#39;on&#39;# - &#39;off&#39;AUTOPAUSE=&quot;off&quot;# [AUTOMATICALLY PAUSE WINDOWS TIMEOUT]# NOTES:# - This setting determines the duration of inactivity to tolerate before Windows is automatically paused.# - This setting is ignored if &#39;AUTOPAUSE&#39; is set to &#39;off&#39;.# - The value must be specified in seconds (to the nearest 10 seconds e.g., &#39;30&#39;, &#39;40&#39;, &#39;50&#39;, etc.).# - For RemoteApp RDP sessions, there is a mandatory 20-second delay, so the minimum value that can be specified here is &#39;20&#39;.# - Source: https://techcommunity.microsoft.com/t5/security-compliance-and-identity/terminal-services-remoteapp-8482-session-termination-logic/ba-p/246566# DEFAULT VALUE: &#39;300&#39;# VALID VALUES: &amp;gt;=20AUTOPAUSE_TIME=&quot;300&quot;# [FREERDP COMMAND]# NOTES:# - WinApps will attempt to automatically detect the correct command to use for your system.# DEFAULT VALUE: &#39;&#39; (BLANK)# VALID VALUES: The command required to run FreeRDPv3 on your system (e.g., &#39;xfreerdp&#39;, &#39;xfreerdp3&#39;, etc.).FREERDP_COMMAND=&quot;&quot;Once the config file is created, we can download and execute the winapps installer from the host i.e., Alma Linux/ RHEL terminal using following command.bash &amp;lt;(curl https://raw.githubusercontent.com/winapps-org/winapps/main/setup.sh)Follow the on-screen instruction. Install winapps to current system is recommended. Now onwards, you can open any Word, Presentation or Excel sheets by right click and choosing appropriate MS Office application names. Anytime, you can access Windows 11 OS from Application –&amp;gt; Others –&amp;gt; Windows (on Xfce).MiscellaneousI have tried winapps on GNOME, KDE and now in XFCE. I found that performance of MS Office is much better in XFCE. It opens all application as intended and faster than other desktop environments. Whenever you reboot your system, Windows 11 should also be booting in background. If something goes wrong, it is most likely that Windows 11 has not booted in the background. You can use following commands to check and control Windows 11 VM using docker commands.Check if the Windows 11 is booted by checking docker process.docker psand it should show the running process as shown below.CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES4d4e0f472f61 dockurr/windows &quot;/usr/bin/tini -s /r…&quot; 7 minutes ago Up 2 minutes 0.0.0.0:3389-&amp;gt;3389/tcp, :::3389-&amp;gt;3389/tcp, 0.0.0.0:8006-&amp;gt;8006/tcp, 0.0.0.0:3389-&amp;gt;3389/udp, :::8006-&amp;gt;8006/tcp, :::3389-&amp;gt;3389/udp windowsFollowing actions can be performed whenever you are in need with respect to Windows 11 Virtual Machine.docker compose --file ~/.config/winapps/compose.yaml start # Power on the Windows VMdocker compose --file ~/.config/winapps/compose.yaml pause # Pause the Windows VMdocker compose --file ~/.config/winapps/compose.yaml unpause # Resume the Windows VMdocker compose --file ~/.config/winapps/compose.yaml restart # Restart the Windows VMdocker compose --file ~/.config/winapps/compose.yaml stop # Gracefully shut down the Windows VMdocker compose --file ~/.config/winapps/compose.yaml kill # Force shut down the Windows VMThat’s it for now." }, { "title": "Make RHEL 8.x / Alma Linux 8.x as Perfect Desktop", "url": "/posts/make-rhel-alma-linux-8-as-perfect-desktop/", "categories": "Tutorial", "tags": "rhel, linux, alma-linux", "date": "2024-12-25 00:00:00 +0000", "snippet": "Why Old and Conservative DistributionFrom my previous blog posts, one can understand that I use Arch Linux with K Desktop Environment (KDE) as my primary desktop on my Laptop. I also have one more ASUS Laptop which I got in 2018. One day, I realised that I had not used my old Laptop for a very long time. Therefore, I wanted to try some Distro which is not KDE on this. Immediately, Ubuntu was the only Distro that came to my mind due to the excellent performance it gave me on the very same Laptop. Downloaded and tried the recently released Ubuntu 24.04 LTS version. To my surprise, for the first time, it gave me a disastrous performance. It took too much time to install and boot thereafter. I had to wait for at least four to five seconds after clicking any application to open. Updated the packages, including Kernel, to the latest version to check if the issue is gone. But it did not.This issue has forced me to drop my plan to use Ubuntu and opt for a lightweight distro. At this point, I also decided to drop the GNOME-based Distro and try some other Desktop Manager that does not compromise on usability as well. After doing some research and from my past experience I decided to go for XFCE4-based Distro.After deciding on XFCE4 Desktop Manager, then came yet another headache. Which Distro to choose? Everyone from various websites and tech blogs suggested using MX Linux, Linux Mint or XYZ Distro which all boils down to Debian + XFCE4. However, I also realised at the same time that I already use Red Hat in one of my Virtual Machines and am also required to work on RHEL for my professional work. Therefore, decided to install Alma Linux which is free Enterprise Linux, an alternative to RHEL. Though the Distro is currently under maintenance support with effect from 3 May 2024, I decided to install Alma Linux 8.x, precisely version 8.10, to ensure I use the same version I use for Official purposes.Therefore, I decided to install Alma Linux Version 8.10 with XFCE4 as Desktop Manager.Note: What I meant by saying conservative in my heading is that it is Super Stable.Install RHEL / Alma Linux 8.xDue to its popularity, there are tons of tutorials available online. I don’t want to repeat the same in this post. However, I want to highlight a few important steps I have taken here.Download ISOThe links to various ISO files are here. I downloaded AlmaLinux OS 8.10 Minimal ISO. Though it is named Minimal, it is a DVD image and its size is around 2GB. It also allows us to install the OS in offline mode.Make Live USBI used lsblk to find my USB disk. In my case, /dev/sdc was the name of the attached disk.$ sudo dd if=/path/to/alma-linux-8.10.iso of=/dev/sdc status=progress conv=fsync bs=4M &amp;amp;&amp;amp; syncChange /path/to/alma-linux-8.10.iso with the real path of AlmaLinux OS 8.10 Minimal ISO.The other option to make a reliable Live USB is balenaEtcher.Install OptionsI had a 500GB SSD disk available on my Laptop and selected the full disk. I also gave automatic partitioning during installation. Post-install, this is what I got:-$ df -hFilesystem Size Used Avail Use% Mounted ondevtmpfs 7.8G 0 7.8G 0% /devtmpfs 7.8G 91M 7.7G 2% /dev/shmtmpfs 7.8G 9.3M 7.8G 1% /runtmpfs 7.8G 0 7.8G 0% /sys/fs/cgroup/dev/mapper/almalinux-root 70G 27G 44G 38% //dev/sdb2 1014M 315M 700M 31% /boot/dev/sdb1 599M 5.9M 593M 1% /boot/efi/dev/mapper/almalinux-home 387G 14G 373G 4% /hometmpfs 1.6G 12K 1.6G 1% /run/user/1000Connecting to the InternetDuring the installation process, I noticed that the system took more than 50 min to install. Therefore, I decided to update to check if the same issue persists. This is where I encountered the issue. The recommended way to connect to the internet using the command line is using nmcli. However, the application could not activate my wifi at all. Then, I came up with my own solution using a mobile phone. I connected my Android phone to a Wi-Fi network and used a USB cable to provide internet to my Laptop using USB Tethering. This is the only way I could connect to the Internet before bringing up my Desktop. Later, I also used sudo nmtui to activate wifi and connect to the Internet.Add Additional RepositoriesThe default repositories enabled in Alma Linux / RHEL are Base OS and Applications. Some of the applications we will be using later are available in third-party repositories. Enable those now.Install and enable Extra Package for Enterprise Linux (EPEL) repo.$ sudo dnf install epel-release$ sudo dnf --enablerepo=epel groupEnable Power Tool repository.$ sudo dnf config-manager --set-enabled powertoolsInstall and enable fusion repos. Fusion has free and non-free sections. We will add both of them.$ sudo dnf install distribution-gpg-keys -y$ sudo rpmkeys --import /usr/share/distribution-gpg-keys/rpmfusion/RPM-GPG-KEY-rpmfusion-free-el-$(rpm -E %rhel)$ sudo rpmkeys --import /usr/share/distribution-gpg-keys/rpmfusion/RPM-GPG-KEY-rpmfusion-nonfree-el-$(rpm -E %rhel)$ sudo dnf --setopt=localpkg_gpgcheck=1 install https://mirrors.rpmfusion.org/free/el/rpmfusion-free-release-$\\(rpm -E %rhel).noarch.rpm https://mirrors.rpmfusion.org/nonfree/el/rpmfusion-nonfree-release-$\\(rpm -E %rhel).noarch.rpm$ sudo dnf --setopt=localpkg_gpgcheck=1 install https://mirrors.rpmfusion.org/free/el/rpmfusion-free-release-$\\(rpm -E %rhel\\).noarch.rpm https://mirrors.rpmfusion.org/nonfree/el/rpmfusion-nonfree-release-$\\(rpm -E %rhel\\).noarch.rpm$ sudo dnf --setopt=localpkg_gpgcheck=1 install https://mirrors.rpmfusion.org/free/el/rpmfusion-free-release-$(rpm -E %rhel).noarch.rpm https://mirrors.rpmfusion.org/nonfree/el/rpmfusion-nonfree-release-$(rpm -E %rhel).noarch.rpmAdd sublime-text repo.$ sudo rpm -v --import https://download.sublimetext.com/sublimehq-rpm-pub.gpg$ sudo dnf config-manager --add-repo https://download.sublimetext.com/rpm/stable/x86_64/sublime-text.repoInstall XFCE4 and Enable Auto LoginNext, we will install the XFCE4 graphical desktop. It is available as a group package. Check if the package is available in the repo.$ sudo dnf group list | grep -i xfceXfceIf you see Xfce output as shown above, we can go ahead and install the Desktop.$ sudo dnf groupinstall &quot;Xfce&quot; &quot;base-x&quot; -yStart the XFCE desktop on reboot.$ echo &quot;exec /usr/bin/xfce4-session&quot; &amp;gt;&amp;gt; ~/.xinitrc$ sudo systemctl set-default graphical$ sudo rebootFor auto login (without the need to provide a password on every reboot), edit /etc/gdm/custom.conf file and add the following content.[daemon]AutomaticLogin=sundarAutomaticLoginEnable=TrueWhere sundar is my username and you need to change it as per your username.Install Better Shell (zsh)The first thing I do after installing any distro is to install zsh and configure it with a few additional plugins. Apart from aesthetics, it provides increased performance with assistance. Install and change the shell.$ sudo dnf install git chsh zsh -y$ chsh -s $(which zsh)Once the shell is changed, we need to reboot for proper functioning.$ sudo rebootWhen you open Terminal for the first time after enabling zsh, it will ask you questions. Accept recommended options and write the default .zshrc file. Before we start installing plugins, we need to download and install the necessary fonts to display symbols in the Terminal. Execute the following lines one by one in the terminal.# Create fonts directory$ mkdir ~/.local/share/fonts# Download MesloLGS fonts family to &#39;fonts&#39; directory$ wget https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf -P ~/.local/share/fonts$ wget https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold.ttf -P ~/.local/share/fonts$ wget https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Italic.ttf -P ~/.local/share/fonts$ wget https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold%20Italic.ttf -P ~/.local/share/fonts# Also install the famous JetBrain mono fonts$ wget https://github.com/ryanoasis/nerd-fonts/releases/latest/download/JetBrainsMono.zip -P ~/.local/share/fonts # Move into the font directory$ cd ~/.local/share/fonts # Unzip compressed fonts$ unzip JetBrainsMono.zip # Remove the downloaded zip file $ rm JetBrainsMono.zip# Update font cache to make it available to all apps$ fc-cache -fvOnce the fonts are installed, we need to select MesloLGS NF Regular in the terminal by navigating to Edit –&amp;gt; Preferences –&amp;gt; Appearance –&amp;gt; Change Font to MesloLGS NF Regular. Once the correct font is selected, we can clone plugin repos. We will be using only three plugins viz., zsh-syntax-highlighting, zsh-autosuggestions and powerlevel10k. Please google to find out more about the plugins. Clone one by one as below.$ git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting$ git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions$ git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10kUpdate the ~/.zshrc file with following content.ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;andplugins=(git zsh-syntax-highlighting zsh-autosuggestions)Finally, source the zshrc file using the source ~/.zshrc command to take effect of all changes before closing terminal.Install Necessary SoftwareThe term Necessary is a relative word. Here, I meant necessary for me to work on a daily basis. Your requirements may be different. I installed the following packages.Install Google ChromeEdit or create /etc/yum.repos.d/google.chrome.repo file with the following content.[google-chrome]name=google-chromebaseurl=http://dl.google.com/linux/chrome/rpm/stable/$basearchenabled=1gpgcheck=1gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pubInstall the Google Chrome Stable version.$ sudo dnf install google-chrome-stable -yInstall Sublime Text$ sudo dnf install sublime-text -yOnce installed, you may want to follow my https://wxguy.in/posts/sublime-text-as-python-ide tutorial to make it as perfect IDE for Python.Install Documents SoftwareAlma Linux does not ship with Office suite by default. The Libre Office available in the repo is very old. But I want to install only the latest version. Here comes the flatpak for rescue. Enable it and install Libre Office &amp;amp; Artha (excellent offline dictionary).Install and enable flatpak repo.$ sudo dnf install flatpak -y$ flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepoInstall the applications.$ flatpak install flathub net.sourceforge.artha.Artha$ flatpak install flathub org.libreoffice.LibreOfficeIf you wish to run the flatpak application from terminal, following command will do.# $ flatpak run application_name$ flatpak run net.sourceforge.artha.ArthaAnytime, you can search for the latest software using the following command.$ flatpak search application_nameInstall Audio and Video PlayersIt is completely a personal choice. I use minimal ones viz., rhythmbox for audio and mpv for video.$ sudo dnf install rhythmbox mpv -yMiscellaneous SoftwareSome of the additional utilities are required for dealing with files and other packages.$ sudo dnf install file-roller makeself util-linux-user -yPersonalise Look and FeelThe XFCE4 desktop installed earlier carries bare bone look. However, there are additional plugins already available in the repo for improving productivity. You can search xfce4 plugins using the following command.$ sudo dnf search xfce4-Once installed, the plugin can be added to the panel by ring-clicking on it.Install Dracula ThemeThere are many themes available for Xfce desktop. I prefer to use Dracula which is a complete theme for desktop, terminal, neovim and other applications. Install it by following the steps.# Download Dracula theme$ wget https://github.com/dracula/gtk/archive/master.zip -P ~/Downloads# Extract the compressed file$ unzip master.zip# Rename the directory to Dracula$ mv gtk-master Dracula# Create theme directory and move the Dracula directory$ mkdir ~/.themes$ mv Dracula ~/.themes# Clone Dracula xfce-terminal theme$ git clone https://github.com/dracula/xfce4-terminal.git$ mkdir -p ~/.local/share/xfce4/terminal/colorschemes$ cp xfce4-terminal/Dracula.theme ~/.local/share/xfce4/terminal/colorschemes# Download Dracula icons$ git clone https://github.com/m4thewz/dracula-icons ~/.icons/dracula-iconsOnce installed, themes and icons can be changed from xfce Settings Manager –&amp;gt; AppearanceInstall and Configure ConkyConky is a lightweight desktop theme and widget manager. It uses less memory and makes your desktop look great. Many themes are available on the GitHub platform. But, I prefer to use conky-grapes from https://github.com/popindavibe/conky-grapes. This theme requires the following system packages.$ sudo dnf install conky ffmpeg jq ncal acpi mocp -yInstall conky-grapes theme and set it up.# Clone repo and move inside the cloned repo$ git clone https://gitlab.nomagic.uk/popi/conky-grapes ~/conky/conky-grapes$ cd ~/conky/conky-grapes# Copy font file to local fonts directory$ cp *.ttf ~/.local/share/fontsThere is a bug in the conky-grapes package. It searches for wifi network information in /proc/net/wireless file. However, this file does not exist in RHEL version 8.x based distros. This problem can be solved by replacing ‘/proc/net/wireless’ with ‘/proc/net/igmp’ in ‘create_config.py’ file. Edit the file accordingly.Once done, see the list of options available with this theme package.$ python3 ./create_config.py -hI prefer to use black or dark wallpaper. For my wallpaper, I found the following colours looks better.$ python3 ./create_config.py -ri red -ti white -te pinkWe can view the changes immediately by issuing the following command.$ conky -q -d -c ~/conky/conky-grapes/conky_gen.conkyrcWe can autostart the above conky widget during boot. Create a file at ~/.config/autostart/conky_theme.sh with the following content.#!/bin/sh# Wait for 3 sec to load Desktop GUI componentssleep 3conky -q -d -c ~/conky/conky-grapes/conky_gen.conkyrcMake it executable.$ chmod +x ~/.config/autostart/conky_theme.shTo auto start create a ~/.config/autostart/conky_grapes.desktop file with the following content (change username with yours).[Desktop Entry]Name=Conky Grapes ThemeGenericName=Conky ThemeComment=Start Conky Grapes ThemeExec=/home/username/.config/autostart/conky_theme.shTerminal=falseType=ApplicationX-GNOME-Autostart-enabled=trueNow onwards, the conky theme will load automatically on every reboot.Install and Configure NeovimI use neovim or nvim occasionally to learn and for fun. I have already working configurations on my Arch Linux and hosted the config file in GitHub at https://github.com/wxguy/nvim. But making it work under RHEL or Alma Linux version 8.x is little tricky. If you install nvim from the repo, it won’t work as it is very old.Download the latest working version of nvim for older distributions.$ wget -c https://github.com/neovim/neovim-releases/releases/latest/download/nvim-linux64.tar.gzExtract the compressed file to the home directory.$ tar -xvzf nvim-linux64.tar.gz -C ~Make the extracted directory hidden with a .$ mv ~/nvim-linux64 ~/.nvimCreate a soft link at bin directory to invoke nvim from the terminal easily.$ mkdir -p ~/.local/bin/nvim$ ln -s ~/.nvim/bin/nvim ~/.local/bin/nvimInstall necessary applications so that configurations work fine.The pyright plugin we will use requires at least node version 12 or above. Install it by using the following commands.# Disable default node$ sudo dnf module reset nodejs# Install node version 14$ sudo dnf module install nodejs:14Some of the nvim plugins use the latest applications that are not even available in the repo. However, they are distributed through copr repo. Add and enable some of the repos.$ sudo yum install yum-utils -y$ sudo yum-config-manager --add-repo=https://copr.fedorainfracloud.org/coprs/carlwgeorge/ripgrep/repo/epel-7/carlwgeorge-ripgrep-epel-7.repo$ sudo dnf copr enable tkbcopr/fd -y$ sudo dnf copr enable atim/lazygit -yInstall necessary applications.$ sudo yum install ripgrep fd hunspell-en xclip lazygit -yThe application fzf is not available from repos. Install it directly from github itself.$ git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf$ ~/.fzf/installAll necessary applications are installed. Now, clone my nvim config repo.$ git clone https://github.com/wxguy/nvim.git ~/.config/nvim &amp;amp;&amp;amp; nvimand follow onscreen instructions. You might get an error locating the dict file. Replace /usr/share/hunspell/en_GB-large.dic with /usr/share/myspell/en_GB.dic in ~/.config/nvim/lua/plugins/cmp-dictionary.lua file.Install and Configure KittyInstall Kitty terminal using the following command.$ curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin$ ln -sf ~/.local/kitty.app/bin/kitty ~/.local/kitty.app/bin/kitten ~/.local/bin/$ cp ~/.local/kitty.app/share/applications/kitty.desktop ~/.local/share/applications/$ cp ~/.local/kitty.app/share/applications/kitty-open.desktop ~/.local/share/applications/$ sed -i &quot;s|Icon=kitty|Icon=$(readlink -f ~)/.local/kitty.app/share/icons/hicolor/256x256/apps/kitty.png|g&quot; ~/.local/share/applications/kitty*.desktop$ sed -i &quot;s|Exec=kitty|Exec=$(readlink -f ~)/.local/kitty.app/bin/kitty|g&quot; ~/.local/share/applications/kitty*.desktop$ echo &#39;kitty.desktop&#39; &amp;gt; ~/.config/xdg-terminals.listYou can change themes using the following. I use Dracula to match with the rest of my desktop theme.$ kitty +kitten themesSync System Clock With NTPI had an issue with my Laptop clock. It always showed some other time despite setting the correct time zone. Solved this issue by following a few commands.$ sudo dnf -y install ntp ntpdateAdd ‘allow 192.168.1.0/24’ in the following /etc/chrony.conf file.$ sudo echo &quot;allow 192.168.1.0/24&quot; &amp;gt;&amp;gt; /etc/chrony.confFinally, start the ntpd demon.$ sudo systemctl start ntpdOnce done, it automatically checks for NTP time and correct the system clock.Install MS OfficeA separate blog post is on its way. Stay tuned….. You can find the details on how to install MS Office on RHEL based distro at https://wxguy.in/posts/install-ms-office-any-version-on-rhel-alma-linux-based-distros.That’s it for now. I may update the post if I find some other useful stuff." }, { "title": "Compile Latest FreeRDP on Red Hat 8.x or Alma Linux 8.x or Any Other RHEL Based Distros", "url": "/posts/compile-freerdp-on-rhel-alma-linux-8/", "categories": "Tutorial", "tags": "virtual-machine, linux", "date": "2024-12-23 09:30:00 +0000", "snippet": "About FreeRDPFreeRDP is an Open Source implementation of Microsoft’s proprietary Remote Desktop Protocol (RDP) client. It allows users to connect to the remote desktop, which can be Windows, Linux, or macOS. The project is hosted in GitHub and distributed under an Apache licence. The application is feature-rich and has many command-line options to improve the performance of remote desktop access. Due to the popularity of this application, many distributions make it available in their repository. Apart from accessing the remote desktops, I also use this application for accessing MS Office suite, as part of winapps, from my Linux system.Why do you need to compileWhile a distribution I use already has FreeRDP in its repo, why do you need to compile it? If you use rolling-based distribution, then you need not worry. However, traditional distributions such as Red Hat, Ubuntu, etc., tend to ship only specific versions in their repos. However, FreeRDP is an actively developed application and releases are made with more features in quick succession. The need for compiling FreeRDP arose when I wanted to use winapps on Alma Linux/ RHEL version 8.x. The FreeRDP version available in the repo is 2.11.7 whereas the minimum required by winapps is 3.0. There is also an option to install the latest FreeRDP using flatpak. But it won’t work with winapps due to a known bug. Therefore, I was compelled to compile FreeRDP on Alma Linux 8.x. While there are clear instructions on FreeRDP wiki at GitHub https://github.com/FreeRDP/FreeRDP/wiki/Compilation#compilation, it is not meant for beginners. I have spent a day compiling the software and learned a few additional things that I want to document here. The procedure listed here also works for RHEL 8.x or other RHEL-based distributions and tested with version 8.x only. It may work on the 9.x series as well, but you may need to adjust certain procedures when you encounter errors.Install necessary packagesWe need the basic development tools to compile software. In RHEL-based distros, it comes in the form of a group package. We can install all packages using the following command:-sudo dnf groupinstall &#39;Development Tools&#39; -yFreeRDP is a complex software that deals with network, security, audio, video, filesystems, etc., and hence various additional packages are required to be installed. The following command will do that:-sudo dnf install -y ninja-build alsa-lib-devel uriparser-devel cjson-devel SDL2 SDL2_ttf-devel SDL2_image libusb cups-devel libuuid-devel ccache cmake fuse3-devel opus-devel lame-devel docbook-style-xsl ocl-icd-devel pam-devel systemd-devel git-clang-format openssl-devel libX11-devel libXext-devel libXinerama-devel libXcursor-devel libXi-devel libXdamage-devel libXv-devel libxkbfile-devel alsa-lib-devel libusb-devel SDL2-devel pkcs11-helper-devel krb5-devel libwinpr-devel soxr-devel cairo-devel wayland-devel wayland-protocols-develIf you find any missing package from the repo, ensure to enable the epel repo. If you find a missing xxx package during compilation, search for that specific package using dnf search xxx. If the search is successful and the package named xxx-devel is available, then install it using sudo dnf install xxx-devel -y.Export PathsDuring compilation, some libraries would expect config files of other libraries in specific package config locations. These locations can be found using pkg-config --variable pc_path pkg-config command. To append the PKG_CONFIG_PATH with the search path, use the following command before starting compiling:-export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$(pkg-config --variable pc_path pkg-config)Link LibrariesDuring compilation, make command kept on compiling about missing library libwinpr-tools.so. However, I was sure that I installed the exact library earlier. To find what went wrong and what exact name of the library *.so file it is searching, use the following command:-ld -lwinpr-tools --verbose In the long list of output, search for two specific lines, as shown below:-SEARCH_DIR(&quot;=/usr/x86_64-redhat-linux/lib64&quot;); SEARCH_DIR(&quot;=/usr/lib64&quot;); SEARCH_DIR(&quot;=/usr/local/lib64&quot;); SEARCH_DIR(&quot;=/lib64&quot;); SEARCH_DIR(&quot;=/usr/x86_64-redhat-linux/lib&quot;); SEARCH_DIR(&quot;=/usr/local/lib&quot;); SEARCH_DIR(&quot;=/lib&quot;); SEARCH_DIR(&quot;=/usr/lib&quot;);..attempt to open //usr/x86_64-redhat-linux/lib64/libwinpr-tools.so failedHere, the make is looking for libwinpr-tools.so in the following directories:- /usr/x86_64-redhat-linux/lib64 /usr/lib64 /usr/local/lib64 /lib64 /usr/x86_64-redhat-linux/lib /usr/local/lib /lib /usr/libI searched all the above-listed directories and found the required libraries in the following locations:-ls /usr/lib64/libwinpr* /usr/lib64/libwinpr2.so /usr/lib64/libwinpr2.so.2.11.7 /usr/lib64/libwinpr-tools2.so /usr/lib64/libwinpr-tools2.so.2.11.7/usr/lib64/libwinpr2.so.2 /usr/lib64/libwinpr-tools2.so.2 As you can see, the specific library was available but with a different name. To make it work, I have linked the following two libraries with specific names as shown below:-sudo ln -s /usr/lib64/libwinpr-tools2.so.2.11.7 /usr/lib64/libwinpr-tools.sosudo ln -s /usr/lib64/libwinpr2.so.2.11.7 /usr/lib64/libwinpr.soCompile FreeRDPNow we are ready to go ahead and start the compilations. Accordingly, clone the FreeRDP repo to a specific location, and in my case it is in ~/Downloads directory:-git clone --depth 1 https://github.com/freerdp/freerdp.git ~/Downloads/FreeRDP uses cmake for compilation. Therefore, create a build directory inside the cloned repo and move into it:-mkdir -p ~/Downloads/freerdp/buildcd ~/Downloads/freerdp/buildBy default, the installation location is /usr/local. However, I don’t want to disturb the default system paths. Accordingly, I choose to install at /home/sundar/freerdp3. Here, sundar is my username and change it as per your requirement. Compile FreeRDP with the following options, and you can refer to all available options with their meanings from the official link https://github.com/FreeRDP/FreeRDP/wiki/Compilation#Options:-cmake .. -DWITH_MBEDTLS=ON -D CMAKE_INSTALL_PREFIX=/home/sundar/freerdp3 D CMAKE_SKIP_INSTALL_RPATH=ON -DWITH_CAIRO=ON -DWITH_SERVER=ON -DWITH_SAMPLE=ON -DUSE_UNWIND=OFF -DWITH_SWSCALE=OFF -DWITH_PLATFORM_SERVER=OFFYou have to CMAKE_INSTALL_PREFIX=/home/sundar/freerdp3 option with yours. If there is no error, go ahead and create executables using the make command:-makeFinally, install the executables and libraries in the custom location that we have mentioned as part of the cmake argument:-make installIf everything goes well, it should not report any errors.Append PATH and Test InstallationCheck if xfreerdp is created at a custom location:-ls /home/sundar/freerdp3/binfreerdp-proxy freerdp-shadow-cli sfreerdp sfreerdp-server wlfreerdp xfreerdpThe executable is successfully created as intended. Make it available to be executed from the terminal by appending ~/.bashrc, if you use bash or ~/.zshrc, if you use zsh. The following command is for the zsh shell which I use currently:-echo &quot;PATH=$PATH:/home/sundar/freerdp3/bin&quot; &amp;gt;&amp;gt; ~/.zshrcIf you don’t want to close the terminal and reopen it to use xfreerdp, source the ~/.zshrc file:-source ~/.zshrcValidate if all are successful using the following:-xfreerdp --versionThis is FreeRDP version 3.10.4-dev0 (9fe96b4)That’s it. Apart from compiling FreeRDP, I have mentioned certain additional steps to debug the compilation process. I hope that it helps someone look for a similar guide." }, { "title": "How to Make Sublime Text as a Perfect Python IDE", "url": "/posts/sublime-text-as-python-ide/", "categories": "Tutorial", "tags": "python, ide, text-editor", "date": "2024-10-05 15:40:00 +0000", "snippet": "IDE or Text Editor for Python Development?I have been using Python for more than a decade now and love for the language is still growing. As Python is strict in their approach while writing syntax, even a extra space will result in error, leading to crashing of application. This is where the use of helper software comes in. These helper software are famously known as Integrated Development Environment (IDE) and Text Editor. Python has plenty of them in each category. Both the software provide different set of guidance to users to perform better coding. There are plenty of debate going around these software regarding should you use IDE or Text Editor? It all depends on what user has and want. It is no denying that IDE such as PyCharm offer much better development options and experience than any other Text Editor. However, to avail all the features offered by such an IDE, you must be working on larger project and have a better hardware resource. Otherwise, in most cases, decent Text Editor with suitable plugins would do the job.Why Choose Sublime TextI have tried many of the text editors such as VS Code, Kate, Neovim and most recently, Zed. However, none comes close to Sublime Text. It is more elegant, small in size, have good sets of Plugins and most importantly, it is faster than any other editors out there. I have been using Sublime Text editor for many years, but have never paid attention to its plugin ecosystem in details. I did try a few plugins in recent past and result is truly amazing. Therefore, penning down here for my future use and for the benefits of others. Some of the plugins I am using are very specific to my need and hence you may need to tweak or skip those accordingly.Operating System DetailsI am working on Arch Linux with KDE Desktop Environment. Details of my system is appended below.neofetch -` sundar@archlinux .o+` ---------------- `ooo/ OS: Arch Linux x86_64 `+oooo: Host: TravelMate P214-53 V1.47 `+oooooo: Kernel: 6.6.52-1-lts -+oooooo+: Uptime: 17 mins `/:-:++oooo+: Packages: 1706 (pacman) `/++++/+++++++: Shell: zsh 5.9 `/++++++++++++++: Resolution: 1920x1080 `/+++ooooooooooooo/` DE: Plasma 6.1.5 ./ooosssso++osssssso+` WM: kwin .oossssso-````/ossssss+` Theme: Lightly [Plasma], Breeze-Dark [GTK2], Breeze [GTK3] -osssssso. :ssssssso. Icons: lightly [Plasma], Dracula [GTK2/3] :osssssss/ osssso+++. Terminal: kitty /ossssssss/ +ssssooo/- CPU: 11th Gen Intel i7-1165G7 (8) @ 4.700GHz `/ossssso+/:- -:/+osssso+- GPU: Intel TigerLake-LP GT2 [Iris Xe Graphics] `+sso+:-` `.-/+oso: Memory: 8118MiB / 15775MiB `++:. `-/+/ .` `/Install Necessary System PackagesThe details on how to install Sublime Text itself on any Linux Distro is listed in Official Repo. If you wish to install it directly from Arch aur repo, you can use the following command:-paru -Sy sublime-text-4Before we need to proceed, there are few other additional packages required to be installed on the host system. Following command will do that:-paru -Sy pyright ruff nodejs nodejs-cspell python-jediIf you want beautiful font for editor, you can install Victor Mono font from aur with following command:-paru -Sy ttf-victor-mono-nerdInstall Sublime Text PluginsAuto Completion (Through Language Server Protocol [LSP])The first and most important duty of IDE or Text Editor meant for software development is to provide better auto completion. Now a days, this feature is mostly provided by a technique called Language Server Protocol (LSP). More on this is listed at https://microsoft.github.io/language-server-protocol and https://langserver.org/. Details about LSP for Sublime Text is provided in the link at https://lsp.sublimetext.io and list of supported Language Server is listed at https://lsp.sublimetext.io/language_servers. To provide better auto completion, linting and formatting, we will install four packages such as LSP, LSP-pyright, LSP-ruff and Jedi - Python Auto Completion from Package Control. To do that open Command Palette either from Tool –&amp;gt; Command Palette or simply pressing Ctrl + Shift + P then type install packages. In the package control bar, type each of the package names and hit enter for install. Restart the editor to take effect. Now you can open any Python file with .py extension and start importing and code few lines. You will find how good the editor turned it to be.Auto Complete Suggestion by LSP Client on Python File Installing LSP-pyrignt itself good enough to get auto completion in Sublime Text. However, bracket completion () for methods and functions such as simple print statement is not provided by pyright. To make it working, we have to install Jedi plugin as well.It is important to note that Jedi - Python Auto Completion from Package Control is an old plugin and almost no commit has been made in the last two years. Since LSP is the future I made an attempt to implement jedi-language-server for Sublime Text as an independent plugin. The plugin is hosted at https://github.com/wxguy/LSP-jedi. It works perfectly fine on my system and found that it is much better than Jedi plugin. If you wish to install Jedi Language Server plugin, you can disable or uninstall Jedi plugin and install LSP-jedi using following command:-git clone https://github.com/wxguy/LSP-jedi.git ~/.config/sublime-text/Packages/LSP-jediAllAutoCompleteIf you wish to get auto completion help from already opened buffers (files for dummies) then All AutoCompletion is the plugin that you find it to be useful. While it is very good in providing suggestions, sometimes I found it to be annoying as it provides too many suggestions and what you look for is buried under the long list of suggestions.Additional Auto Complete Suggestion by AllAutocompleteAutoDocstringAutoDocstring plugin enable users to easily create a doc string by using key combination. After you install the plugin, go to class or function or method line (where : is written) and press key combinations ctrl + alt + &#39;. This will automatically create the doc string template for you. You just have to move from one to another field by using tab.AutoDocstring in Action on a Dummy FunctionConda ManagementI use multiple conda environments for different projects. Every time you open the Sublime Text editor, if you are not in correct Environment, you will get lot of complaints about missing module etc. This is mainly due to non detection of Conda environment by Sublime Text. To manage this you have a Conda plugin https://packagecontrol.io/packages/Conda. After installation, you need to edit the Conda configuration file from Preference –&amp;gt; Package Settings –&amp;gt; Conda –&amp;gt; Settings. In the new window, enter the following details (modify the path appropriately as per yours):-{ &quot;executable&quot;: &quot;~/miniconda3/bin/python&quot;, &quot;environment_directory&quot;: &quot;~/miniconda3/envs&quot;,}Now onwards anytime you need to change Conda environment, you can type in Command Palette Conda and select what you need to do as shown below:-Conda Plugin in ActionSidebarEnhancementThe SidebarEnhancement provides side bar menu for Sublime Text. Once installed you can use ctrl + KB combination to reveal and retreat the side bar. The plugin is good but it can be made beautiful by installing another plugin called A File Icon. You can see how beautiful the Side Bar now looks after instaling both the plugins:-SidebarEnhancement with A File IconAutoFileNameImaging you are working in a directory and need to insert the path of certain file. Normally, either you remember the path to file and type of use terminal to get the path and insert to the file. However, you can get the file path without leaving Sublime Text using AutoFileName plugin. I have discovered this plugin very late but found it to be extremely useful.DictionaryAutoCompleteApart from coding, you might be working on a project that require a lot of writing. In such case, automatic completion of workds from a dictionary would be a bless. DictionaryAutoComplete does exactly that. It is actually a VS code plugin ported to Sublime Text. You can see plugin action from official link https://packagecontrol.io/packages/DictionaryAutoComplete to find how useful it is.Asciidoctor and AsscidocAsciidoctor and AsciiDoc plugins are more personal in nature as I work on some of the project using AsciiDoctor. It provides better syntax highlighting.Colour SchemesThe default themes shipped with Sublime Text are good. However, I do have a habit of chaning themes based on my Desktop theme. Accordingly, I do keep on switching between Dracula, Adaptive, Bracket and Gravity. It is purely a personal choise and there are so many to choose from Package Control to suite your liking.Shortcut Keys for Quick NavigationLike any other text editors and IDEs, Sublime Text also offer set of key bindings to quickly navigate within various UI of the editor. Most important key bindings are listed at https://shortcuts.design/tools/toolspage-sublimetext/ and https://www.shortcutfoo.com/app/dojos/sublime-text-3-win/cheatsheet. If you wish to remap key combination with any other action, you can do so from Preference –&amp;gt; Key Bindings. Here are the following one key bindings (LSP Code Action and Super Tab)I have enabled for quick movements:-[ // to expand quick action of LSP code action { &quot;keys&quot;: [&quot;ctrl+shift+l&quot;], &quot;command&quot;: &quot;lsp_code_actions&quot; }, // Setup super tab for auto completion. In the auto completion prompt, you can use // tab and shift+tab to navigate up and down. Brought this habit from NeoVim editor. { &quot;keys&quot;: [&quot;tab&quot;], &quot;command&quot;: &quot;move&quot;, &quot;args&quot;: {&quot;by&quot;: &quot;lines&quot;, &quot;forward&quot;: true}, &quot;context&quot;: [ { &quot;key&quot;: &quot;auto_complete_visible&quot;, &quot;operand&quot;: true, &quot;operator&quot;: &quot;equal&quot; } ] }, { &quot;keys&quot;: [&quot;shift+tab&quot;], &quot;command&quot;: &quot;move&quot;, &quot;args&quot;: {&quot;by&quot;: &quot;lines&quot;, &quot;forward&quot;: false} },]" }, { "title": "How to install Microsoft Office 2007/ 2010/ 2016/ 2021/ 365 or any version on Linux", "url": "/posts/how-tot-install-ms-office-on-linux/", "categories": "Tutorial", "tags": "virtual-machine, ms-office, linux", "date": "2024-05-31 15:40:00 +0000", "snippet": " A post regarding installing MS Office on Alma Linux or RHEL based OS is available at https://wxguy.in/posts/install-ms-office-any-version-on-rhel-alma-linux-based-distros.MS Office 2021 Word File in Arch LinuxRequirement of Microsoft OfficeUndoubtedly, Microsoft Office is one of the most popular and most widely used Office suites in the world. Especially, names such as Word, Powerpoint and Excel have become synonymous with office applications/ suits. Based on my experience, I can tell that a new user who shifted to Linux would immediately search for procedures to install Microsoft Office on a Linux OS. As with other software, there are many native alternatives available for Linux. However, the biggest issue here is the compatibility of file types. The Word files or presentations created in Microsoft Office would never open properly in other Office suites, including the de-facto Office suite ‘Libre Office’. The myriad of formulas and options available in Excel will never come in other Office suites anytime soon. Therefore, it is a natural choice for users to switch between Microsoft Windows and Linux Desktop for simply using this great piece of software.Options available to Install Microsoft Office on LinuxWhen searching online for installing MS Office on Linux Desktop, most of the tutorials would tell you to follow one of the following methods:- Use alternate native software such as Libre Office, WPS Office, Open Office etc. Use wine to install MS Office. Use PlayonLinux which under-the-hood uses wine. Use Paid software for better compatibility such as crossover which is again the improved version of wine. Use Windows Virtual Machine inside Linux Desktop and use it whenever required. or finally Install Windows OS alongside Linux and boot into Windows whenever required.When you follow any one of the methods listed above, either you will end up using an older version of MS Office or you will still use the software that is not fully compatible with MS Office (except using MS Office directly inside Windows). I have tested all the methods and the best solution I found is the procedure listed in subsequent paragraphs.Winapps for Native Windows Software (kind-of) on LinuxSo what is so fuzz about Winapps? It is a community software which offers one of the virtualisation solutions to run any Windows applications as if they are installed inside a Linux Desktop. It uses Windows Virtual Machine to install the software and FreeRDP to access this software from Linux. The beauty of this application is the native integration of the file manager right-click option to open and specify the mime type to open in Windows software.When I heard about this software two years ago in 2022, I tried it many times and it always gave me some sort of issues which forced me to uninstall. The application was initially developed at https://github.com/Fmstrat/winapps. However, the repo did not receive an update for a long time. Therefore, the project was forked and maintained by the community at https://github.com/winapps-org/winapps. Recently, I gave Winapps software again a try and did not encounter an issue. I also found it to be too good for running day-to-day utility. Right now, I have installed MS Office 2021 and the application works flawlessly on my Arch Linux desktop.I will be writing more about the technical know-how on installing and configuring winapps for using MS Office 20xx/ 365 in this blog post. There are many steps involved in configuring the software correctly. Read and execute the commands carefully.System ConfigurationI will be covering this tutorial on Arch Linux as it is the only desktop I use nowadays. If you use any other desktop, you must install equivalent commands on your own. Here is my system configuration:neofetch -` sundar@archlinux .o+` ---------------- `ooo/ OS: Arch Linux x86_64 `+oooo: Host: TravelMate P214-53 V1.47 `+oooooo: Kernel: 6.6.32-1-lts -+oooooo+: Uptime: 1 hour, 48 mins `/:-:++oooo+: Packages: 1691 (pacman), 15 (flatpak) `/++++/+++++++: Shell: zsh 5.9 `/++++++++++++++: Resolution: 1920x1080 `/+++ooooooooooooo/` DE: GNOME 46.2 ./ooosssso++osssssso+` WM: Mutter .oossssso-````/ossssss+` WM Theme: Adwaita -osssssso. :ssssssso. Theme: Adwaita [GTK2/3] :osssssss/ osssso+++. Icons: Adwaita [GTK2/3] /ossssssss/ +ssssooo/- Terminal: kitty `/ossssso+/:- -:/+osssso+- CPU: 11th Gen Intel i7-1165G7 (8) @ 4.700GHz `+sso+:-` `.-/+oso: GPU: Intel TigerLake-LP GT2 [Iris Xe Graphics] `++:. `-/+/ Memory: 11065MiB / 15775MiB .` `/Install Necessary SoftwareThe procedure we are going to follow uses docker for installing and running Windows 11 in the background. Therefore, install all the necessary software:sudo pacman -Sy freerdp dnsmasq vde2 bridge-utils openbsd-netcat libguestfs ebtables iptables podman docker docker-composeAdd KVM and libvert into to user group:sudo usermod -aG libvirt $(whoami)sudo usermod -aG KVM $(whoami)Enable podman and docker services using following commands:sudo systemctl enable --now podman.socketsudo systemctl start dockerInstall Windows OS Using DockerOnce the system software is installed and configured, we need to install Windows Virtual Machine on the host OS. We will be using the docker for this purpose. The main advantage of this method is to install the Windows OS without user intervention and run it in the background. It also does not require the user to have a Windows OS ISO file as it would automatically download as part of the installation process. All the details about Windows OS are saved in a config file (*.yml). For this, we need to create a compose.yml file. You can create it anywhere you like, but, ensure to run the docker-compose command in the same location where the compose.yml file exists. In my case, I have created the file in home directory at ~/compose.yml. Update the ~/compose.yml file with the following content:name: &quot;winapps&quot;services: windows: image: dockurr/windows container_name: windows environment: VERSION: &quot;tiny11&quot; RAM_SIZE: &quot;6G&quot; # Change RAM size CPU_CORES: &quot;4&quot; # Change core USERNAME: &quot;Sundar&quot; # Change username with yours PASSWORD: &quot;xxxxxx&quot; # Change password with yours privileged: true ports: - 8006:8006 - 3389:3389/tcp - 3389:3389/udp stop_grace_period: 2m restart: on-failure volumes: - data:/storage - /mnt/Data:/storage # /path/to/mnt/dir:storage_nameWe will be using the above information to tell the docker-compose command to install the Windows OS with all the specifications listed above. You must edit the file content depending on your hardware and liking. The compose.yml is a yml file. In our case, we will be installing the Windows 11 Tiny version to save space and resources. It is easy to understand the terminologies of the above file. You can always refer to https://github.com/dockur/windows for further tweaking the file content. Once saved, you can run the below command to install the Windows OS in the background:docker compose up -dYou can also view what is happening to Windows OS from a web browser at http://127.0.0.1:8006. The docker command will install the OS without any user intervention. Once installation is completed, you must logout before proceeding. If you wish to access all the files located at different mount partitions, it is recommended to link the mounted partition to your home directory like ln -s /mnt/Data /home/username.Install and Configure WinappsClone and move into the winapps repo using the following commands:git clone https://github.com/winapps-org/winapps.gitcd winappsThe winapps configuration is stored at ~/.config/winapps/winapps.conf and create a file with the following content:RDP_USER=&quot;Sundar&quot;RDP_PASS=&quot;xxxxxx&quot; # Replace the password with yours#RDP_DOMAIN=&quot;MYDOMAIN&quot;RDP_IP=&quot;127.0.0.1&quot;#RDP_SCALE=100#RDP_FLAGS=&quot;&quot;#MULTIMON=&quot;true&quot;#DEBUG=&quot;true&quot;#FREERDP_COMMAND=&quot;xfreerdp&quot;Since you are already there in winapps directory, you can check if your Windows 11 is installed correctly using following command:bin/winapps checkThe above command will ask you to accept the key and accept it. Thereafter, it will bring the Windows File Explorer as shown in the following figure.Windows Explorer in Arch LinuxNow you can navigate to network –&amp;gt; tsclient –&amp;gt; Linux home dir –&amp;gt; copy MS Office installers to –&amp;gt; Documents folder of Windows 11. Then install MS Office which you generally do just by clicking setup.exe –&amp;gt; next –&amp;gt; next –&amp;gt; and done. Once MS Office is installed, you can close the File Explorer. If everything goes well, you can install the actual winapps using the following command:./installer.shAccept all the questions and install for users only. Once all the above procedures are done, you can try to open a document created using MS Office and this time by right click –&amp;gt; Open with –&amp;gt; Choose the ‘Microsoft Word’ application. It should open in MS Office Word application as shown in the following image.Sample IEEE Paper Template in MS Office Word in Arch LinuxFinal TweakingIf all works well, then you can manage (start/stop) using the following docker commands:docker compose start # for starting the machinedocker compose stop # for stopping the machineThe above commands are good to execute but you will get frustrated as it will through your black screen if the Windows OS is not booted before opening MS Office documents. You can solve this issue by booting Windows OS during Arch Linux boot. For this, create a file /home/usrename/.config/winapps/win11_start.sh with the following content:#!/bin/shsleep 3docker compose up -d # start the docker in the backgroundMake it executable:chmod +x /home/username/.config/winapps/win11_start.shNext, create a desktop file at ~/.config/autostart/win11-docker.desktop with the following content:[Desktop Entry]Name=Windows 11 DockerGenericName=Windows 11Comment=Start Windows 11 using DockerExec=/home/username/.config/winapps/win11_start.shTerminal=falseType=ApplicationX-GNOME-Autostart-enabled=trueThat’s it. Now onwards, every time you reboot, your Windows OS also will boot and run in the background. This would ensure that your MS Office applications are always available in Arch Linux whenever you open it.Useful TipsYou can access the full Windows 11 Desktop using following command:xfreerdp3 +clipboard /u:Sundar +compression -wallpaper -menu-anims -themes /v:127.0.0.1 /p:xxxxxx +fonts /drive:Data,/mnt/Data /home-drive /fwhere: +clipboard –&amp;gt; Share clipboard copy between Host and Guest OS /u: –&amp;gt; Username of the Windows 11 Desktop +compression –&amp;gt; Enable data compression to speedup the machine -wallpaper –&amp;gt; Don’t shown wallpaper to improve the Windows 11 performance -menu-anims –&amp;gt; Remove menu animation of Guest OS -themes –&amp;gt; Remove theme of Guest OS /v: –&amp;gt; Guest OS IP address /p: Password of the user we will be required to login (Change with yours) +fonts –&amp;gt; Keep the Guest OS fonts /drive: Enable drive. In this case, I am sharing mount point /home-drive –&amp;gt; Share home directory of Host OS /f –&amp;gt; Open Windows 11 in full-screen mode When the above command is executed with \\f (full-screen) you won’t be able to navigate to next opened window using normal Alt + Tab keys. If you wish to exit windows full-screen, you can use the Alt + Ctrl + Enter keys.If you encounter any error in connecting to Windows applications, you can check if Windows 11 docker service is running using following command:$ docker psThe above command should list you the Windows Guest OS as shown below:CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES4d4e0f472f61 dockurr/windows &quot;/usr/bin/tini -s /r…&quot; 7 minutes ago Up 2 minutes 0.0.0.0:3389-&amp;gt;3389/tcp, :::3389-&amp;gt;3389/tcp, 0.0.0.0:8006-&amp;gt;8006/tcp, 0.0.0.0:3389-&amp;gt;3389/udp, :::8006-&amp;gt;8006/tcp, :::3389-&amp;gt;3389/udp windowsYour docker may not boot Windows 11 Desktop if you have enabled ‘Desktop Sharing’ option in GNOME Settings. I encountered this issue recently and disabled it from GNOME Settings –&amp;gt; Desktop Sharing –&amp;gt; Disable Desktop Sharing." }, { "title": "Install Wgrib2 on Ubuntu/ Red Hat or any other Linux OS", "url": "/posts/install-wgrib2-on-linux/", "categories": "Info, collections", "tags": "wgrib2, linux, weather, grib2", "date": "2023-01-10 15:40:00 +0000", "snippet": "About GRIB FileIf you are a Meteorologist or Climate Scientist or Engineer working on a forecast or Reanalysis data set, you would have probably come across the grib file format. It is a shortened name for “General Regularly distributed Information in Binary form” which is a WMO standard for storing and transferring gridded datasets. The gridded datasets may be forecast data from Atmospheric, Ocean, or Climatology models. The GRIB files may have extensions like ‘.grib2’, ‘.grib’, ‘grb’, or ‘.gb’ and in some cases, it may not even have a file name extension.There are mainly two types of GRIB file formats i.e. GRIB1 and GRIB2. Some info on the GRIB file format may be referred to here at https://confluence.ecmwf.int and here at https://weather.gc.ca.About wgrib2wgrib2 is one of the most versatile and fast tools available for reading and manipulating GRIB2 gridded datasets. For complete technical documentation, you may refer https://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_doc/. The official documentation is available at https://www.nco.ncep.noaa.gov. Some of the frequently used options with examples are listed at https://www.ftp.cpc.ncep.noaa.gov/wd51we/wgrib2/tricks.wgrib2. Since this post is not about working with wgrib2, I will go ahead and install the package now.Install wgirb2 on LinuxThis guide is on how to install wgrib2 on a Ubuntu OS. A guide for Windows users is given at the end of this article.Firstly, update the OS before proceeding further:sudo apt-get update &amp;amp;&amp;amp; apt-get upgradeInstall all necessary dependencies on Ubuntu and its derivatives:sudo apt-get install -y build-essential libaec-dev zlib1g-dev libcurl4-openssl-dev libboost-dev curl wget zip unzip bzip2 gfortran gcc g++If you use Redhat or its derivatives, use the following commands:sudo groupinstall &quot;Development Tools&quot;sudo dnf install gcc-gfortran csh perlMake a working directory for compilation and move into it:mkdir -p ~/Downloads/wgrib2cd ~/Downloads/wgrib2Download the latest source code and extract it to the current working directory:wget -c ftp://ftp.cpc.ncep.noaa.gov/wd51we/wgrib2/wgrib2.tgztar -xzvf wgrib2.tgzMove to the grib2 directory where all the necessary compilation files are located:cd grib2Compile the source code:makeNote that it does not require configure as we do for many of the source compilations. If everything goes well, you should have compiled the wgrib2 executable under the wgrib2 directory. Check if it is properly compiled using the following command:wgrib2/wgrib2 -configwhich should print information like the below:wgrib2 v3.1.1 4/2022 Wesley Ebisuzaki, Reinoud Bokhorst, John Howard, Jaakko Hyvätti, Dusan Jovic, Daniel Lee, Kristian Nilssen, Karl Pfeiffer, Pablo Romero, Manfred Schwarb, Gregor Schee, Arlindo da Silva, Niklas Sondell, Sam Trahan, George Trojan, Sergey Varlamov Compiled on 14:16:59 Jan 10 2023Netcdf package: 4.8.1 of Oct 31 2022 22:16:44 $ is installedhdf5 package: system is installedJasper 2.0.33 is installedmysql package is installedregex package is installedflush_mode determined by stat()tigge package is installedinterpolation package is not installed, default vectors:UGRD/VGRD VUCSH/VVCSH UFLX/VFLX UGUST/VGUST USTM/VSTM VDFUA/VDFVA MAXUW/MAXVW UOGRD/VOGRD UICE/VICE U-GWD/V-GWD USSD/VSSD Geolocation library status (by search order) gctpc geolocation is enabled spherical geolocation is enabledUDF package is not installedversion ftime=2maximum number of arguments on command line: 10000maximum number of -match,-not,-if, and -not_if options: 2000maximum number of -match_fs,-not_fs,-if_fs, and -not_if_fs options: 2000maximum number of -fgrep, -egrep, -fgrep_v, -egrep_v options: 200RPN registers: 0..19memory files: @mem:0, @mem:1 .. @mem:29stdout buffer length: 100000default decoding: g2clib emulationg2clib decoders are not installedSupported decoding: simple, complex, rle, ieee, png, jpeg2000Supported encoding: simple, complex, ieee, jpeg2000default WMO names: NCEPC compiler: gcc CPPFLAGS= -Wall -Wmissing-prototypes -Wold-style-definition -Werror=format-security -ffast-math -O3 -DGFORTRAN OpenMP: control number of threads with environment variable OMP_NUM_THREADSINT_MAX: 2147483647ULONG_MAX: 18446744073709551615If you wish to access wgrib2 directly from the terminal anywhere as we do for other commands like ls , cp, df etc., copy the wgrib2 binary into the appropriate location as indicated below:cp -rfv wgrib2/wgrib2 /usr/local/bin/wgrib2If you wish to clean up the compilation directory, simply delete the working directory we have used so far with the following command:rm -rfv ~/Downloads/wgrib2That’s it for Linux users.Install wgrib2 on WindowsFor Windows, there is a precompiled version is available at https://www.ftp.cpc.ncep.noaa.gov/wd51we/wgrib2/Windows10/. Click on the directory that contains the latest version of wgrib2 and download all *.exe and *.dll files. Save all the downloaded files and run wgrib2.exe. That’s it.You can download this article from here for free." }, { "title": "List of Useful Python Packages for Atmospheric, Ocean and Climate Sciences", "url": "/posts/list-of-python-packages-for-met-ocean-and-climate-science-applications/", "categories": "Info, collections", "tags": "python, python-modules, python-packages, scientific-modules", "date": "2022-05-25 15:40:00 +0000", "snippet": "Here is the list of Python modules, packages, and programs that I keep on referring to or visiting often. Most of the packages can be installed using conda, some using pip, and a few need to be installed using setup.py script. Descriptions of packages are taken from official sites or documentation. The list is exhaustive and hopes that some will benefit from my research while looking for the specific use case.Integrated Development Environments or Text EditorsPyCharm Community Edition. It comes with a lot of goodies by default. Install it only if you have enough hardware resources.Sublime Text. Install Sublime Text with Anaconda and Tabnine plugins to make it a truly remarkable IDE.Spyder. Highly recommended if you are working on Scientific applications. This is also the recommended IDE by the scientific community.ipython. It is not a direct scientific Python package. IPython provides a rich architecture for interactive computing.Core Packagesnumpy. The fundamental package for scientific computing with Python. Core package around in which other scientific modules are built.matplotlib. A comprehensive library for creating static, animated, and interactive visualizations in Python. Matplotlib makes easy things easy and hard things possible.scipy. Fundamental algorithms for scientific computing in Python. It provides algorithms for optimization, integration, interpolation, eigenvalue problems, algebraic equations, differential equations, statistics, and many other classes of problems.sympy. SymPy is a Python library for symbolic mathematics. It aims to become a full-featured computer algebra system (CAS) while keeping the code as simple as possible in order to be comprehensible and easily extensible. SymPy is written entirely in Python.Data Input/ OutputNetCDFnetcdf4-python. A Python interface to the netCDF C library by unidata who is also the creator of netCDF itself. Most of the other easy-to-use NetCDF libraries are built on top of this library.xarray. It is inspired by and borrows heavily from pandas, the popular data analysis package focused on labeled tabular data. It is particularly tailored to working with netCDF files, which were the source of xarray’s data model, and integrates tightly with dask for parallel computing.GRIB 1/2pygrib. A high-level Python interface to ECCODES library for GRIB file IO operations. If you are working on GRIB2 files, you can make use of this library.HDF5h5py. Pythonic interface to the HDF5 binary data format. It lets you store huge amounts of numerical data, and easily manipulate that data from NumPy.Satellitessatpy. It is a python library for reading, manipulating, and writing data from remote-sensing earth-observing satellite instruments. Satpy provides users with readers that convert geophysical parameters from various file formats to the common Xarray DataArray and Dataset classes for easier interoperability with other scientific Python libraries.WxRadarwradlib. The ωradlib project has been initiated in order to facilitate the use of weather radar data as well as to provide a common platform for research on new algorithms. It supports various DWR radar formats available in the market.pycinrad. PyCINRAD is an open-source weather radar library that supports the reading of all mainstream radar formats in China and provides some practical algorithms and visualizations.pycwr. The China Weather Radar Toolkit supports most of China’s radar formats(WSR98D, CINRAD/SA/SB/CB, CINRAD/CC/CCJ, CINRAD/SC/CD).Radiosondespyigra. The National Centres for Environmental Information provides a large global archive for vertical soundings also known as radiosondes. PyIGRA downloads and extracts data from the Integrated Global Radiosonde Archive data set and prepares them in a more handy data format.Other Formatspygdal. GDAL, the Geospatial Data Abstraction Library, is an access and translator library for raster and vector geospatial data formats, often known as the swiss knife of geospatial. pygdal is a Python interface to the GDAL library.argos. Argos is a GUI for viewing and exploring scientific data, written in Python and Qt. It has a plug-in architecture that allows it to be extended to read new data formats. At the moment plug-ins are included to read HDF-5, NetCDF-4, WAV, Exdir, NumPy binary files, and various image formats, but a plug-in could be written for any data that can be expressed as a Numpy array.siphon. Siphon is a collection of Python utilities for downloading data from remote data services. Much of Siphon’s current functionality focuses on access to data hosted on a THREDDS Data Server, although access to data hosted by other web technologies is being quickly added.mkmov. This utility is designed to make a movie from a NetCDF file or stitch together a series of .png files. The interface is by command line and everything is done in one line.Data Science, Machine Learning, and Artificial Intelligencepandas. A fast, powerful, flexible, and easy-to-use open-source data analysis and manipulation tool, built on top of the Python programming language. This is the base package for working with a statistical dataset in Python.seaborn. It is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.theano. Theano is a Python library that allows you to define, optimize, and efficiently evaluate mathematical expressions involving multi-dimensional arrays.tensorflow. TensorFlow is an open-source library for fast numerical computing. This module makes it easy for beginners and experts to create machine learning models.keras. Keras is an API designed for human beings, not machines. Keras follows best practices for reducing cognitive load: it offers consistent &amp;amp; simple APIs, it minimizes the number of user actions required for common use cases, and it provides clear &amp;amp; actionable error messages.pytorch. PyTorch has a range of tools and libraries that support computer vision, machine learning, and natural language processing. The library is open-source and is based on the Torch library.scikit-learn. It is a powerful Python library that was originally generated to serve the purpose of data modeling and building machine learning algorithms. It has a simple, engaging, and consistent interface that is exceptionally user-friendly, making it easy to use and share data.geopandas. It is an open-source project to make working with geospatial data in python easier. GeoPandas extends the datatypes used by pandas to allow spatial operations on geometric types.pytables. PyTables is a package for managing hierarchical datasets and is designed to efficiently and easily cope with extremely large amounts of data.Atmospheric Sciencemetpy. MetPy is a collection of tools in Python for reading, visualizing, and performing calculations with weather data.wrf-python. A collection of diagnostic and interpolation routines for use with output from the Weather Research and Forecasting (WRF-ARW) Model.wrf_install. automate the downloading &amp;amp; building process of the wrf model with all dependencies.getgfs. Extracts weather forecast variables from the NOAA GFS forecast with no obscure, platform-specific, dependencies.pyart. It is a Python module containing a collection of weather radar algorithms and utilities.prob_meteogram. An intuitive probabilistc meteogram based on ensemble forecasts.SkewTplus. SkewTplus provides useful tools for plotting and analyzing atmospheric sounding data. In particular, it provides useful classes to handle the awkward skew-x projection.tropycal. Python package intended to simplify the process of retrieving and analyzing tropical cyclone data, both for past storms and in real-time, and is geared towards the research and operational meteorology sectors.aoslib. aoslib is a Python library of standard atmospheric and oceanic sciences calculation routines. It exists mainly so we’re all not writing our own routines to calculate potential temperature, isentropic potential vorticity, etc.imdlib. IMDLIB is a python package to download and handle binary gridded data from the India Meteorological Department (IMD).verif. Verif is a command-line tool that lets you verify the quality of weather forecasts for point locations. It can also compare forecasts from different forecasting systems (that have different models, post-processing methods, etc).eofs. eofs is a Python package for EOF analysis of spatial-temporal data. Using EOFs (empirical orthogonal functions) is a common technique to decompose a signal varying in time and space into a form that is easier to interpret in terms of spatial and temporal variance.windspharm. windspharm is a Python package for performing computations on global wind fields in spherical geometry. It provides a high-level interface for computations using spherical harmonics.windrose. A windrose, also known as a polar rose plot, is a special diagram for representing the distribution of meteorological data, typically wind speeds by class and direction. This is a simple module for the matplotlib python library, which requires NumPy for internal computation.tephigrams. Python package for plotting tephigrams.pymeteo. Skew-T/Log-P plotting routine, meteorology, and interfacing with CM1. This package provides routines for plotting Skew-T/Log-P diagrams and working with CM1 output.metar. metar is a python package for interpreting METAR and SPECI coded weather reports.PythonMETAR. Yet another Python package for interpreting METAR and SPECI weather reports.xcape. xcape provides an efficient workflow for the calculation of parameters commonly used in meteorology, allowing for post-processing of 4D gridded model or observed data using xarray for parameters including Convective Available Potential Energy (CAPE) and Storm Relative Helicity (SRH). This is made possible by leveraging wrapped Fortran routines and NumPy and allows for process parallelization via Dask.act. Atmospheric Community Toolkit (ACT) is an open-source Python toolkit for working with atmospheric time-series datasets of varying dimensions. The toolkit is meant to have functions for every part of the scientific process; discovery, IO, quality control, corrections, retrievals, visualization, and analysis.tcpyPI. tcpyPI, ‘pyPI’ for short, is a set of scripts and notebooks that compute and validate tropical cyclone (TC) potential intensity (PI) calculations in Python.pyresample. Pyresample is a python package for resampling geospatial image data. It is the primary method for resampling in the SatPy library, but can also be used as a standalone library.gridded. gridded is a single API for accessing/working with gridded model results on multiple grid types.xESMF. xESMF is a Python package for regrinding. It is powerful, easy to use, and fast.uxarray. Uxarray aims to provide xarray-styled functionality for unstructured grid datasets following ugrid conventions.sharppy. SHARPpy is a collection of open-source sounding and hodograph analysis routines, a sounding plotting package, and an interactive, cross-platform application for analyzing real-time soundings all written in Python. It was developed to provide the atmospheric science community with a free and consistent source of sounding analysis routines.pywrf. Python tools to launch and process WRF simulations. The code is a little old but still useful.wrfplot. Python script to plot various WRF-ARW outputs. Command-line driven by passing options. The script is written in Python 2.x but gives you insight on processing wrfout files.new_wrf_plotting_functions. Yet another collections of functions for plotting WRF data.wrftools. Functions for post-processing WRF output data.wrf-aurorun. Scripts to automate a WRF model run.Data Visualisationcartopy. This package is designed for geospatial data processing to produce maps and other geospatial data analyses. It makes use of the powerful PROJ, NumPy, and Shapely libraries and includes a programmatic interface built on top of Matplotlib for the creation of publication-quality maps.colormaps. Colormaps is a library of a collection of colormaps or color palettes for Python. It’s written in Python with matplotlib and NumPy as dependencies. You can use Colormaps to customize matplotlib plots.cmocean. This package contains colormaps for commonly-used oceanographic variables. Most of the colormaps started from matplotlib colormaps, but have now been adjusted using the viscm tool to be perceptually uniform.psyplot. psyplot is an open-source python project that mainly combines the plotting utilities of matplotlib and the data management of the xarray package. The main purpose is to have a framework that allows a fast, attractive, flexible, easily applicable, easily reproducible, and especially an interactive visualization of your data.bokeh. Bokeh is an interactive visualization library that targets modern web browsers for presentation. Bokeh can help anyone who would like to quickly and easily connect powerful PyData tools to interactive plots, dashboards, and data applications.pyferret. Python interface to famous ferret visualisation tool for oceanographers.[gradspy(]http://cola.gmu.edu/grads/gadoc/python.html). Official Python extension of Grads plotting software.py3grads. Yet another Python 3 Interface to GrADS.pygmt. PyGMT is a library for processing geospatial and geophysical data and making publication-quality maps and figures. It provides a Pythonic interface for the Generic Mapping Tools (GMT), a command-line program widely used in the Earth Sciences.geoviews. GeoViews is a Python library that makes it easy to explore and visualize geographical, meteorological, and oceanographic datasets, such as those used in weather, climate, and remote sensing research.geocat-viz. The GeoCAT-viz repo contains tools to help plot data, including convenience and plotting functions that are used to facilitate plotting geosciences data with Matplotlib, Cartopy, and possibly other Python ecosystems plotting packages.pylustrator. Pylustrator is software to prepare your figures for publication in a reproducible way. This means you receive a figure representing your data alongside a generated code file that can exactly reproduce the figure as you put them in the publication, without the need to readjust things in external programs.pyproj. Python interface to PROJ (cartographic projections and coordinate transformations library). Most of the Plotting packages which require geo-reference uses this package.Climate and Forecast (CF) Conventionscftime. Python library for decoding time units and variable values in a netCDF file conforming to the Climate and Forecasting (CF) netCDF conventions.cf-plot. A set of Python routines for making the common contour, vector, and line plots that climate researchers use.cf-python. An Earth Science data analysis library that is built on a complete implementation of the CF data model.cfdm. This library implements the data model of the CF (Climate and Forecast) metadata conventions http://cfconventions.org and so should be able to represent and manipulate all existing and conceivable CF-compliant datasets.cf-checker. The CF Checker is a utility that checks the contents of a NetCDF file and complies with the Climate and Forecasts (CF) Metadata Convention.cf_xarray. cf_xarray mainly provides an accessor (DataArray.cf or Dataset.cf) that allows you to interpret Climate and Forecast metadata convention attributes present on xarray objects.Climate Scienceclimetlab. CliMetLab is a Python package aiming at simplifying access to climate and meteorological datasets, allowing users to focus on science instead of technical issues such as data access and data formats.aospy. aospy (pronounced A - O - S - py) is an open-source Python package for automating your computations that use gridded climate and weather data (namely data stored as netCDF files) and the management of the results of those computations.xclim. xclim is a library of functions to compute climate indices from observations or model simulations. Its objective is to make it as simple as possible for users to compute indices from large climate datasets and for scientists to write new indices with very little boilerplate.climate-indices. This project contains Python implementations of various climate index algorithms which provide a geographical and temporal picture of the severity of precipitation and temperature anomalies useful for climate monitoring and research.Oceanographic Scienceverde. Verde is a Python library for processing spatial data (bathymetry, geophysics surveys, etc) and interpolating it on regular grids (i.e., gridding).oceanspy. It is a Python package to facilitate ocean model data analysis and visualization.sea-py. Python Tools for Oceanographic Analysis. It is not a package by itself. It is a webpage with a collection of useful oceanography-related analysis tools and tutorials.xmitgcm. It is a python package for reading MITgcm binary MDS files into xarray data structures. By storing data in dask arrays, xmitgcm enables parallel, out-of-core analysis of MITgcm output data.octant. A Python library used for post-processing the output of PMCTRACK - vorticity-based cyclone tracking algorithm.pyroms. Pyroms is a collection of tools to process input and output files from the Regional Ocean Modeling System, ROMS. It was originally started by Rob Hetland as a google code project, then he morphed it into octant, also at google code. Frederic Castruccio then created a fork and renamed it back to pyroms.ctd. Tools to load hydrographic data as pandas DataFrame with some handy methods for data pre-processing and analysis. This module can load SeaBird CTD (CNV), Sippican XBT (EDF), and Falmouth CTD (ASCII) formats.seawater. This is a Python library for calculating the properties of seawater. The package uses the formulas from Unesco’s joint panel on oceanographic tables and standards, UNESCO 1981 and UNESCO 1983 (EOS-80).gsw. This Python implementation of the Thermodynamic Equation of Seawater 2010 (TEOS-10) is based primarily on NumPy ufunc wrappers of the GSW-C implementation.ttide_py. Direct conversion of T_Tide to Python.pytides. Pytides is a small Python package for the analysis and prediction of tides. Pytides can be used to extrapolate the tidal behavior at a given location from its previous behaviour.pywavelets. It is open-source wavelet transform software for Python. It combines a simple high-level interface with low-level C and Cython performance.pywafo. It is WAFO toolbox Python routines for statistical analysis and simulation of random waves and random loads.okean. ocean modeling and analysis tools. But unfortunately, there is no documentation provided on the site.pymc. PyMC3 allows you to write down models using an intuitive syntax to describe a data-generating process.pygridgen. A Python interface to Pavel Sakov’s gridgen library.mixsea. Ocean mixing parameterizations in python.xgcm. xgcm is a python package for working with the datasets produced by numerical General Circulation Models (GCMs) and similar gridded datasets that are amenable to finite volume analysis.Geo Spatialqgis. QGIS is a free and open-source cross-platform desktop geographic information system application that supports viewing, editing, printing, and analysis of geospatial data. It also has a Python API to extend its ability.pysal. Python spatial analysis library is an open-source cross-platform library for geospatial data science with an emphasis on geospatial vector data written in Python.geopy. It is a Python client for several popular geocoding web services. geopy makes it easy for Python developers to locate the coordinates of addresses, cities, countries, and landmarks across the globe using third-party geocoders and other data sources.Astrophysics, Seismology Etc.,argopy. argopy is a python library dedicated to Argo data access, manipulation, and visualisation for standard users as well as Argo experts.yt. yt is a tool for querying, analyzing, and visualizing objects or regions of interest to identify emergent properties in data available in a variety of real-world research data formats. Initially developed for use by professional astronomers, yt can be applied in a variety of domains including astrophysics, seismology, nuclear engineering, molecular dynamics, and oceanography.sunpy. SunPy is a Python-based software library that provides tools for performing research using direct observations of the Sun and Heliosphere.You can download this article from here for free." }, { "title": "How to Setup Python for Atmospheric, Ocean and Climate Sciences", "url": "/posts/setup-python-for-met-ocean-and-climate-science-applications/", "categories": "Tutorial", "tags": "python, scientific, conda", "date": "2022-05-19 12:30:00 +0000", "snippet": "Why Python for Atmospheric and Ocean Sciences?There is plenty of articles that describe why Python is great for use in Atmospheric, Oceanography, Climate, and Geoscience applications. But there is a popular article written by Prof. Johnny Wei -Bing Lin in Dec 2012 issue of the Bulletin of the American Meteorological Society on *Why Python Is the Next Wave in Earth Sciences Computing* way back in 2012. You can download and read this article from here to know more about it. Simply put, it is easy to install, configure, code, and learn, has more scientific packages, and has better support from the community. Therefore, there is no doubt that Python is one of the greatest languages for all types of scientific analysis and you should install it right away. There is a number of ways you can install and configure your Python installation such as package manager provided by your Distros, Python virtual environment, pip, and Python Distributions (Anaconda, ActiveState, PyPy, etc.,). That leads to the next question:Which Python Distribution Should I Choose?It all depends on your usage. If your main interest is scientific, then you should choose Miniconda or Anaconda. If you work mostly on Windows-based applications, then choose ActiveState. Finally, if you want your nonscientific applications to work faster, then choose PyPy distribution. I have worked in all three Python distributions and believe me Miniconda distribution has more libraries compiled for many hardware architectures than the other Python distribution out there. Also, the dependency resolution of the conda package manager is top-notch. The documentation and help from the community are also very important to decide which Distribution to choose. In this too, Miniconda/ Anaconda excels.Miniconda also has its own issue. Since conda try to include all necessary libs and hence no of packages are higher and install size would be bigger. In addition, conda sometimes takes too long to resolve dependencies. If you want to quickly set up your Python distribution for all kinds of applications and are not worried about the size, then you must choose Miniconda.Choosing Best EditorPython is strict in enforcing the way you write your programs. During your initial days, you will encounter many issues which are easily solvable. Choosing the best Integrated Development Environment (IDE) or Editor would solve a lot of issues and make you focus on content rather than debugging silly errors. When it comes to IDEs or Editors, you have plenty of options. But based on my experience, I would list PyCharm as best, Sublime Text as next, and VS Code Editor or Spyder as the last options. Choosing from these options also depends on many factors. If your system is new and has enough hardware resources, then I would recommend you install PyCharm. Otherwise, Sublime Text with Anaconda + Tabnine plugins is highly recommended. There are plenty of tutorials available for you to refer to. I will briefly touch on how to install PyCharm, Sublime Text, and Spyder in subsequent sections.Install IDEs and Text Editors on UbuntuInstalling IDEs or Text Editors require you to issue a few set of commands in the terminal. We will be installing each one by one.Install Sublime TextTo make Sublime Text into truly impressive IDE, you need to install two plugins. All are explained below. For the official installation guide, please refer https://www.sublimetext.com/docs/linux_repositories.html which will have always an updated guide. Let’s install the Editor first by importing the gpg key to trust the Sublime Text official repo.wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/sublimehq-archive.gpgRegister Sublime Text official repo into the local system so that you can get a latest stable version of Editor whenever it is made available.echo deb https://download.sublimetext.com/ apt/stable/ | sudo tee /etc/apt/sources.list.d/sublime-text.listNow update the repo and install sublime-text:sudo apt update &amp;amp;&amp;amp; sudo apt install sublime-textOpen Sublime Text EditorYou need to install Package Control before installing plugins on Sublime Text. Once opening the editor, go to Tools –&amp;gt; Command Palette –&amp;gt; search install –&amp;gt; select Install Package Control. This will take a few seconds and install Package Control on your system.To install the plugin, go to Tools –&amp;gt; Command Palette –&amp;gt; search anaconda –&amp;gt; select the first listed plugin from damnwidget developer.Next, we will install the Tabnine plugin. As per their official statement, this is an AI-powered auto-completion plugin to make faster code. In my experience, it provided a lot of good suggestions and I felt that I was working very fast. It is highly recommended for any Python developer. Let’s install that too.To install the Tabnine plugin, go to Tools –&amp;gt; Command Palette –&amp;gt; search tabnine –&amp;gt; select the first listed plugin.You can create a test Python script to start writing some code to see how good it is.PyCharmThe installation of PyCharm is straightforward in Ubuntu as it is already an available snap store. Before installing the IDE, you must check if your system supports this IDE. You can check the system requirements from here. Some of them are shown below:PyCharm System RequirementsNow install the PyCharm Community edition by issuing the below command:sudo snap install pycharm-community --classicInstall MinicondaFirst, you must download the latest version of Miniconda from https://docs.conda.io/en/latest/miniconda.html#linux-installers. I have checked all my libraries and modules are compatible with Python 3.9 from their repo and hance downloaded Miniconda which supports Python 3.9. Check if we have downloaded successfully by issuing the below command:$ cd Downloads/$ lsMiniconda3-py39_4.12.0-Linux-x86_64.shBy issuing below one command, it will take you through no of pages you need to accept all.$ bash Miniconda3-py39_4.12.0-Linux-x86_64.sh Welcome to Miniconda3 py39_4.12.0To continue the installation process, please review the licenseagreement.Please, press ENTER to continue&amp;gt;&amp;gt;&amp;gt; After accepting the first screen, it will take you to review EULA. Press the space bar until you see Do you accept the license terms? [yes|no]. Enter yes to accept the license.======================================End-User License Agreement - Miniconda======================================Copyright 2015-2022, Anaconda, Inc.All rights reserved under the 3-clause BSD License:...The following packages listed on https://www.anaconda.com/cryptography are included in the Repository accessible through Miniconda that relate to cryptography.Last updated March 21, 2022Do you accept the license terms? [yes|no][no] &amp;gt;&amp;gt;&amp;gt; yesNext, it will inform you of the location where Miniconda will be installed. Just enter to accept the location.Miniconda3 will now be installed in this location:/home/wxguy/miniconda3 - Press ENTER to confirm the location - Press CTRL-C to abort the installation - Or specify a different location below[/home/wxguy/miniconda3] &amp;gt;&amp;gt;&amp;gt; Accepting the location will take a few min to install all default packages.Preparing transaction: doneExecuting transaction: doneinstallation finished.Do you wish the installer to initialize Miniconda3by running conda init? [yes|no][no] &amp;gt;&amp;gt;&amp;gt; yesOnce it is done, you must close and reopen the terminal to take effect.==&amp;gt; For changes to take effect, close and re-open your current shell. &amp;lt;==If you&#39;d prefer that conda&#39;s base environment not be activated on startup, set the auto_activate_base parameter to false: conda config --set auto_activate_base falseThank you for installing Miniconda3!Now you can check if conda is installed successfully by issuing the below command:$ which conda/home/wxguy/miniconda3/bin/condaNow onwards you can start installing modules of your interest with the conda install application_name command.Finding Right ModulesOne of the biggest issues you will face is finding the correct Python package or modules relevant to scientific applications. For this purpose, I have already compiled a huge list of modules relevant to Meteorology, Oceanography, Data-Science, Machine Learning, Artificial Intelligence, Plotting, etc., in the blog post located here. Read about the package by referring their official documentation and start installing choice of your interest.You can download this article from here for free." }, { "title": "How to Enable Hits or Page Views for Jekyll Blog Posts", "url": "/posts/how-to-enable-no-of-hits-page-view-counter-on-jekyll-github-blog-posts/", "categories": "Tutorial", "tags": "linux, jekyll, page-hits, page-views, hits", "date": "2022-05-18 12:00:00 +0000", "snippet": "Page Views or HitsPageviews or Page views or Hits are the metrics that will tell you how many visitors read your particular blog post. In a way, it will tell you what type of users are coming to your site. When I started this blog, I was surprised by the list of features Chirpy Theme offered. Apart from the usual posting and updated timestamp, there was also a feature to display how many visitors visited or viewed a particular blog post. Detailed instruction on how to set up this feature was explained here. It looked promising. But, when I tried to implement the same feature for my blog, I realised that it required a lot of steps. This also includes users providing Credit Card information to Google.So, I decided to search for an alternative that will offer me simple Hits or Page view statistics for each post. Surprisingly, there are only a few that offer such service free of cost. Most of them will tell you to register on their website to generate a token. The same token is to be referred to on your website. After searching for a few more days, I came across the following solutions: https://hits.seeyoufarm.com https://hits.dwyl.comThe approach they offer is similar and does not require you to register anywhere. I tried to implement the second solution https://hits.dwyl.com first but it was able to generate Hits count only for my GitHub repo. Then I tried the first https://hits.seeyoufarm.com solution and it worked. The source code of this application can be found here. Let’s see how I did this for my blog.Configure at Server EndThere are mainly two steps required to be done to enable Hit count for your blog. Firstly, go to https://hits.seeyoufarm.com website and enter your GitHub page URL. In my case, it is https://wxgui.github.io. This is how I entered my blog URL:Enter GitHub Pages Site URLThe website will generate three URL addresses that you can see when you scroll down further. Generated links will look like this:URL Links Generated by https://hits.seeyoufarm.comDepending on your use cases, the above links can be used in Markdown, HTML web pages, or can be embedded in a website. In my case, I just want to show it at the beginning of all blog posts. So I went for the embedded URL:-https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fwxgui.github.io&amp;amp;count_bg=%2379C83D&amp;amp;title_bg=%23555555&amp;amp;icon=&amp;amp;icon_color=%23E7E7E7&amp;amp;title=hits&amp;amp;edge_flat=falseThe rest of the operations are to be carried out in your local Jekyll website repo.Setup Hits Counter for Jekyll BlogWhen you use the above URLs, it will display a small SVG image file on your webpage. However, this will display for your main landing page only. If you need to get Hits for each page, we need to append the path to your post. It is not possible to insert each page manually. Therefore, we will automatically generate using Jekyll’s inbuilt variable {{ page.url }} to point to each page. Accordingly, we insert the text %2F{{ page.url }} between wxgui.github.io and &amp;amp;count_bg texts in the above URL. After modification, the new URL will look like the below:https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fwxguy.github.io%2F{{ page.url }}&amp;amp;count_bg=%2379C83D&amp;amp;title_bg=%23555555&amp;amp;icon=&amp;amp;icon_color=%23E7E7E7&amp;amp;title=Hits&amp;amp;edge_flat=falseThe modified URL is to be inserted in the _layout/post.html file. If your local directory structure does not have the _layout/post.html path, then probably you have installed this theme from the gem. So create a directory:$ cd /path/to/local/jekyll-repo$ mkdir _layoutUse the following command to find where all your gens are located.$ gem environment | grep -i &quot;\\- installation dir&quot;- INSTALLATION DIRECTORY: /home/username/.rvm/gems/ruby-3.0.0Then copy the post.html file from the gem installed location to your local repo directory:$ cp $HOME/.rvm/gems/ruby-3.0.0/gems/jekyll-theme-chirpy-5.1.0/_layouts/post.html _layout/Now open your _layout/post.html file in your favourite text editor and search for &amp;lt;!-- page views --&amp;gt; text. In your case, you may want to insert it in the appropriate location. My theme has already a page counter section. Therefore, added the following modified lines just below the &amp;lt;!-- page views --&amp;gt; line:&amp;lt;span&amp;gt; &amp;lt;em id=&quot;pv&quot; class=&quot;pageviews&quot;&amp;gt; &amp;lt;i class=&quot;fa-duotone fa-circle-dot&quot;&amp;gt;&amp;lt;/i&amp;gt; &amp;lt;/em&amp;gt; &amp;lt;img style=&quot;width: inherit;&quot; src=&quot;https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fwxguy.github.io%2F{{ page.url }}&amp;amp;count_bg=%2379C83D&amp;amp;title_bg=%23555555&amp;amp;icon=&amp;amp;icon_color=%23E7E7E7&amp;amp;title=Hits&amp;amp;edge_flat=false&quot; alt=&quot;Hits&quot; /&amp;gt;&amp;lt;/span&amp;gt;Once you generate your site, you can see a small Hits counter badge at the beginning of all posts. A sample screenshot is shown below:Sample HITS BadgeThat’s it. Happy writing with a happy feeling :-).You can download this article from here for free." }, { "title": "Install Ubuntu on VirtualBox and Configure it Properly", "url": "/posts/install-and-configure-ubuntu-on-virtualbox-properly/", "categories": "Tutorial", "tags": "arch linux, linux, virtualbox, ubuntu", "date": "2022-05-17 16:15:00 +0000", "snippet": "Virtual MachineAs the name suggests, a Virtual Machine is a software that emulates your real hardware. This will enable you to install an Operating System within your Host Operating System. The utility of this Virtual Machine depends on the way you want to use it or configure it. For example, there may be software that only works on Windows-based OS but you have the right to use only Linux-based OS in your organisation. In such a case, you can install a Windows OS within Linux through Virtual Machine software.The main reason why I use Virtual Machine is due to Micro Soft Office Products. Whenever I work on Word or Presentations which required to be shared with others, I fire up my Windows Virtual Machine, use MS Office, and shut down. In addition, I also use Virtual Machine for testing various Distro and to test my pet projects. There are quite a few options available to choose Virtual Machine software, both paid and free. However, for personal and general-purpose, I recommend using the following: VMware Workstation Player Quick EMUlator (QEMU) Virt-Manager VirtualBoxWhy VirtualBox?I have written an article about Virt-Manager and you can read it here. Here are the main reasons I choose VirtualBox over other Virtualisation software: Cross-platform (Linux, Windows, and Mac OS) Rapid development cycle to support the latest OSs Many options are free for personal use Free Superior documentation Help from the communityWhat I Intend to AccomplishThe main intent is to install Ubuntu 22.04 as a Guest OS and share directories and files between the Host and Guest OS. Following are the VirtualBox operations I intend to perform in this tutorial: Install VirtualBox and other additional software on Host OS (Arch Linux) Allocate more processors Allocate more memory (RAM) Manual adjustment of HDD Bidirectional clipboard sharing Network sharing between Host and Guest Boot and install Ubuntu from ISO files Install necessary software on Guest OS for better performance Configure Host and Guest for sharing of files betweenThis tutorial is a lengthy one from installing VirtualBox to enabling file-sharing options. There are lots of screenshots I have posted here for beginners to understand. I believe this one guide is enough to configure VirtualBox software for better performance and get you started with Virtual Machine.Install VirtualBox on Host OSMy Host OS is Arch Linux with up-to-date packages. We need to install three core components to make VirtualBox more user-friendly. I use the linux-lts kernel on my machine and accordingly, the following three packages are to be installed. While virtualbox-ext-oracle can be downloaded directly from the VirtualBox website, I preferred to install it from AUR and I never encountered any issues so far. I used paru package manager instead of pacman as it would pull AUR packages as well.$ paru -S virtualbox virtualbox-host-dkms linux-lts-headers$ paru -S virtualbox-guest-iso$ paru -S virtualbox-ext-oracleAfter installing core packages, the virtualbox driver is to be loaded. Execute the following command in the terminal:$ sudo modprobe vboxdrvNow add vboxusers to the group.$ sudo usermod -aG vboxusers $(whoami) We also need to install the linux-headers package on Ubuntu Guest OS. That will be done in the latter part of the tutorial.Download Ubuntu 22.04 ISOBefore we proceed further to tweak the virtualbox, we need to download the latest Ubuntu 22.04 ISO from Ubuntu’s official website. Go to https://ubuntu.com/download/alternative-downloads and scroll down to section BitTorrent and download torrent file for Ubuntu 22.04 LTS. I recommend this method as the speed of download through torrent is much faster than a direct download. The ISO file downloaded is ubuntu-22.04-desktop-amd64.iso and located in the ~/Downloads directory.Create Virtual Machine for UbuntuIn this section, we will create a new machine and install Ubuntu 22.04 as a Guest OS. Before installing, we need to create a Virtual Machine for our Guest OS. If your VirtualBox GUI is looking ugly under KDE dark mode, you can use the virtualbox -style Fusion %U command from the terminal.Before InstallWhen you open VirtualBox GUI, this is what it looks like.VirtualBox: GUIClicking on the New button will bring a new window as indicated below that will guide you through allocating various hardware to the Virtual Machine. In the first screen, we need to provide the name of the OS, and the location of the machine folder where all Guest OS files will be located. You can manually locate the local directory by clicking on the drop-down option against the Machine Folder option. Ensure that you provide a path that has enough space. Then click Next.VirtualBox: Add New Virtual MachineIn the next window, allocate the necessary RAM size. Remember that whatever you provide here will not be available for your Host OS. The minimum recommanded RAM size is 2GB. But I am providing 8GB as my system has 16GB RAM.VirtualBox: Provide Desired RAM SizeNext, we need to create a hard disk for our new Virtual Machine. Select the Create a virtual hard disk now radio button and click on Create.VirtualBox: Create New Virtual Hard DiskIn the new window, choose the VDI (VirtualBox Disk Image) option and click Next.VirtualBox: Choose Hard Disk TypeNow, we need to select how data is to be stored. The option Dynamically allocated will not create the whole hard disk at one go and it will grow with Guest OS usage. The other option Fixed size will create the whole virtual hard disk file on a local directory which is not recommended. Therefore, we will select the Dynamically allocated option and click Next.VirtualBox: Select Way to Store Data to StorageThat will lead to the next option to allocate virtual hard disk space for the machine. The path to the virtual hard disk file will be created automatically by the virtualbox. You can provide virtual hard disk space for the machine. The minimum recommended size is 20GB. I have given 50GB for Ubuntu 22.04. Once the size is provided, click on Create. This will create the virtual hard disk file and close the wizard.VirtualBox: Provide Desired Hard Disk Space for VM Ubuntu OSAfter the Virtual Machine for Ubuntu 22.04 Guest OS is set up, it will return to VirtualBox GUI. Here you can see that a new entry for Ubuntu 22.04 is made.VirtualBox: View of VirtualBox GUI After Setting UpTweak Virtual Machine SettingsThere are a few more additional settings that need to be tweaked so that we can install Guest OS and improve its performance. Firstly, select Virtual Machine Ubuntu 22.04 from the left panel and click on the Settings option. That will bring up the below settings window. Here we can tweak more options for Guest OS and insert Ubuntu 22.04 ISO for installing from it.Firstly, under the General –&amp;gt; Basic tab section, ensure that name of the machine is mentioned as Ubuntu 22.04.VirtualBox: Settings: General Basic OptionsUnder the General –&amp;gt; Advanced section, we can tweak the clipboard copy-paste between Host and Guest OS. Select Bidirectional for both Shared Clipboard and Drag’n’Drop option as shown below.VirtualBox: Settings: General Advanced OptionsThen go to System –&amp;gt; Motherboard tab and deselect Floppy from the boot order list as we won’t use it.VirtualBox: Settings: System Motherboard OptionsMove to System –&amp;gt; Processor tab and increase the number of the processor to your desired value. If you have 4 then give 2. I have 8 and hence given 4.VirtualBox: Settings: System Processor OptionsUnder Display –&amp;gt; Screen, increase the Video Memory to the desired value. I allocated 64MB to Virtual Machine.VirtualBox: Settings: Display Screen OptionsNow we need to provide the path to our downloaded ISO as part of the storage devices. Go to Storage –&amp;gt; Storage Devices –&amp;gt; Controller IDE and click on the + symbol embedded in CD icon. That will open a new window for adding a new ISO to VirtualBox.VirtualBox: Settings: Storage Controller OptionsIn the Optical Disk Selector window, click on the + icon to open the file manager navigation window.VirtualBox: Settings: Add An Additional ISONavigate to your download directory where your ubuntu-22.04-desktop-amd64.iso is located and click Open.VirtualBox: Settings: Select ISO File From Local DirectoryNow, you can see a new entry for ubuntu-22.04-desktop-amd64.iso that we have selected just now. Select ubuntu-22.04-desktop-amd64.iso entry and click Choose.VirtualBox: Settings: Choose Desired ISOAfter selecting the Ubuntu 22.04 ISO, you can see ISO is attached to Controller: IDE.VirtualBox: Settings: Storage Controller After Attaching ISONow, go to Network –&amp;gt; Adaptor 1 tab and select NAT. For simple browsing and common internet-related option, NAT is more than enough. If you want to interact with Guest OS through network connect, then change this value to Bridged Network which will directly interact with your Host hardware.VirtualBox: Settings: Network Adopter OptionsIf you want Guest OS to access your Host USB devices, then go to USB and enable the Enable USB Controller option. In my case, I have disabled it as it always crashing my VirtualBox. If you do not enable the Enable USB Controller option, a warning message will display at the bottom of the settings window. You can simply ignore this warning.VirtualBox: Settings: USB Controller OptionsYou can also configure your shared folder right now before even booting your Ubuntu 22.04 ISO. For this, go to Shared Folder and click on the + icon as shown in the below image.VirtualBox: Settings: Shared Folders OptionsThat will bring up another helper window where you can provide a path to the Host directory by navigating through the file manager dialog. Provide any name for the Folder Name that will be displayed on Guest OS. Do not forget to select the Auto Mount option. Finally, click Ok. You can add as many shared folders as you want.VirtualBox: Settings: Add Shared Folder Local PathI have added three two-partitions and the Host’s home directory for sharing with Ubuntu 22.04 Guest OS. Once it is completed, you can click Ok which will also close the settings window.VirtualBox: Settings: Shared Folders PAth After Setting UpThat’s all. After enabling/ disabling various options, you can start the Virtual Machine by clicking on the Start icon as shown below.VirtualBox: Start Ubuntu 22.04 Guest OSUbuntu Install ProceduresInstalling Ubuntu 22.04 on a Virtual Machine is a straightforward process. However, I will show here how I did on my Virtual Machine.Starting the Ubuntu 22.04 Virtual Machine will bring in this GRUB Boot message. The select first option Try or Install Ubuntu option.Ubuntu Install: GRUB Boot MenuWhen Ubuntu boots in for the first time it will offer if you need to install or try live Linux. Select Install Ubuntu option.Ubuntu Install: First Boot To Try or InstallSelect the English (US) option for the Keyboard layout and language option. This is not to be confused with the language Indians speak. Though Indians speak UK English, the keyboards we use are from the US.Ubuntu Install: Keyboard Layout and Language SelectionSelect Normal Installation, disable Download Updates option and click Continue.Ubuntu Install: Updates and Other SoftwareSelect Erase disk and install Ubuntu option and click Install Now.Ubuntu Install: Installation TypeFinal confirmation will be asked at this stage. Click Continue.Ubuntu Install: Disk Erase Warning MessageSelect your country by clicking on your country on the map.Ubuntu Install: Choose CountryAdd your username and password here. You can also enable the auto-login option.Ubuntu Install: New User OptionsSit and watch till your files are copied to the Guest OS location.Ubuntu Install: Install ProgressDespite not accepting to download files during installation previously, the installer continues to download certain packages. Mostly, they are language-specific. Hence, you can safely select the Skip option.Ubuntu Install: Skip Download FilesOnce Ubuntu installation is complete, reboot your systemUbuntu Install: First Reboot After InstallDuring the reboot, you must enter the Enter key to remove installation media.Ubuntu Install: Eject Removable Installation MediaAfter reboot, ubuntu will welcome the new user with a few options. You can Skip the online account optionUbuntu Install: Skip Online AccountIf you wish to help Ubuntu you can select appropriate options and select the Next option.Ubuntu Install: Option to Help UbuntuYou can enable or disable Location Services and click Next.Ubuntu Install: Privacy OptionClick Done to complete the welcome screen.Ubuntu Install: Final Welcome WindowYou must update and upgrade your system to the latest packages before proceeding further. You can use the following commands to update and upgrade your system.$ sudo apt update -y$ sudo apt upgrade -yor follow the rest of the guide to set up the best server for your country and update your system.On my system, I could not update to the latest packages as it always failed with the index failed to download error message. So I decided to change my server to the best one. For this open the Software &amp;amp; Updates window by searching on the activities search option.Ubuntu Install: Software And Updates WindowNow click on the Download From drop-down menu and select the Other option.Ubuntu Install: Software And Updates Window Other ServerIn the new window, click on the Select best server option.Ubuntu Install: Software And Updates Window Best ServerWait for a few minutes as it will check for the best server for you.Ubuntu Install: Testing Best ServerOnce the best server is automatically selected, you can select the Choose server option.Ubuntu Install: Choose Best ServerFinally, Reload to download a new index from the newly selected repository.Ubuntu Install: Reload Packages from New RepoAgain search and open the Software Updater application.Ubuntu Install: Search Software Updaterand select the Install Now option.Ubuntu Install: Install New UpdatesAfter updating your system, reboot the system again.Ubuntu Install: Reboot System After UpdateUbuntu 22.04 Post Install ConfigurationsThough you have successfully installed the system, it is still not in usable condition. To make it user-friendly, you need to install VirtualBox Guest Addition Package. You can successfully install only if you have kernel header files installed on Guest OS. So we will install it now using the following command.$ sudo apt install -y build-essential linux-headers-$(uname -r)Now go to the Devices menu in the Virtual Machine window and select the Insert Guest Addition CD Image option. This will automatically mount the Guest Addition ISO image into Ubuntu Guest OS.Ubuntu Post Install: Insert Guest Addition ISONow navigate to the location where the Guest Addition ISO image is mounted and open the location in the terminal.Ubuntu Post Install: Open Terminal From Mounted ISONow you can install VirtualBox Guest Addition for Linux by executing the following command.$ sudo ./VBoxLinuxAdditions.runYou must reboot the system again to take this effect.Ubuntu Post Install: Reboot After Installing VB GAFinally, you can see that VirtualBox automatically adjusted the Guest OS aspect ratio to the size of the Virtual Machine window. You can also play around with other view modes but remember to shortcut key combos.Ubuntu Post Install: Look After Installing VB GASharing of Files Using Shared FolderThough we have added Shared Folder from Host OS and showing up in Guest OS’s file manager, you will not be able to use it. When you access it for the first time you will get the following Permission Error.File Share: Permission Error For Shared FolderTo avoid permission errors, we need to add vboxsf to the group. the following command will do that.$ sudo usermod -aG vboxsf $(whoami)Now onwards, you can start using Ubuntu 22.04 comfortably as we have done a lot of tweaking.Closing ThoughtsThough the steps involved in configuring VirtualBox are many, they are straightforward. One of the best parts of VirtualBox is its documentation and Sharing of the Folder option. With this, you will feel as if you are running an Operating System on real hardware. I would highly recommend VirtualBox for your Virtual Machine needs.You can download this article from here for free." }, { "title": "Install Ubuntu or Linux Operating System on Virtual Machine (Virt-Manager)", "url": "/posts/test-os-using-virtual-machine/", "categories": "Tutorial", "tags": "arch linux, linux, virtual machine, ubuntu, virt-manager", "date": "2022-05-15 05:00:00 +0000", "snippet": "Craze for Testing Operating SystemsI used to be a distro-hopper during my initial introduction to Linux. I made Live CDs of beginner-friendly Linux OSs such as Ubuntu, Fedora, Mandriva, Open Suse, etc., whenever they are released. I am also fascinated about testing mini and micro Linux OSs such as Dam Small Linux (DSL), Puppy, Slitaz, Tiny Core, Astrumi, etc., just to check how they work on my laptop. To get Linux ISO files, I even subscribed to technology magazines such as Digits and Linux for You (later the magazine name was renamed Open Source for You). Later came the craze to test Distros using Linux Live USB. The entire process of testing Distros from the external device was always time-consuming.Things have changed now. Due to my professional work requirements, I had to install and test various software on an independent Linux or Windows platform. Hence, I started looking at a way to quickly test Distros without disturbing my current OS. Searched for a solution and found that Virtual Box is the correct fit to do this job. There are a lot of tutorials available on the internet to install Virtual Box on the host, install Guest OS on Virtual Box and configure the software for better performance. I have installed many Linux and Windows OSs. It always worked out of the box and little tweaking is required for making it usable.But Virtual Box always gave me a surprise. Every time the software is upgraded, it breaks the Guest OS installation due to incompatibilities. On certain occasions, I also found that the performance of the Guest OS is a little laggy after the update.What are Other Options for Virtualisation?After using Virtual Box, I was reading a lot about virtualisation technologies. That lead me to try other virtualisation solutions on my laptop to check if it is better than Virtual Box. Apart from Virtual Box, there are various other software also available to test Guest OS within host OS. Most popular free virtualisation software are:- VMware Workstation Player Quick EMUlator (QEMU) Virt-ManagerAfter reading the pros and cons, I decided to try VMware Workstation Player on my Arch Linux. But it turned out to be a disaster. The installation and usability of Guest OS were very slow. I could not use it for even testing purposes. Therefore, I tried the next one on the list i.e., QEMU. QEMU is based on a Kernel-based Virtual Machine (KVM). That means the virtualisation support is built into the Kernel itself instead of relying on additional third-party virtualisation support. QEMU looked promising. But going through various documentation and blog posts, I understood that it requires more reading to understand how software is to be configured and there is no dedicated GUI present. Hence, I decided to fix on to Virt-Manager.My RequirementsSince I will be using the Virtual Machine on my laptop and not on any production machine, I am not worried about security aspects. Following are the options I configure in my Virtual Box software and I want the same to be supported by Virt-Manager: Support for varieties of Linux and Windows as Guest OS Boot and install from ISO files Allocate more processors Allocate more memory (RAM) Manual adjustment of HDD Sharing of files between Host and Guest OSs (most important) Bidirectional clipboard sharing Software should be easy to use and configure Network sharing between Host and GuestSystem and Software ConfigurationsBelow are my system configurations. The most important thing to note is my laptop has 8 processors, 16GB RAM, enough HDD space, NVIDIA, and Intel Graphics cards.$ neofetch -` .o+` wxguy@archlinux `ooo/ ---------------- `+oooo: OS: Arch Linux x86_64 `+oooooo: Host: X510UNR 1.0 -+oooooo+: Kernel: 5.15.39-1-lts `/:-:++oooo+: Uptime: 1 hours, 3 mins `/++++/+++++++: Packages: 1058 (pacman) `/++++++++++++++: Shell: zsh 5.8.1 `/+++ooooooooooooo/` Resolution: 1920x1080 ./ooosssso++osssssso+` DE: Plasma 5.24.5 .oossssso-````/ossssss+` WM: KWin -osssssso. :ssssssso. WM Theme: Simply_Circles :osssssss/ osssso+++. Theme: Breath Dark [Plasma], Relax-GTK [GTK2/3] /ossssssss/ +ssssooo/- Icons: Papirus-Dark [Plasma], Papirus-Dark [GTK2/3] `/ossssso+/:- -:/+osssso+- Terminal: konsole `+sso+:-` `.-/+oso: Terminal Font: Hack 13 `++:. `-/+/ CPU: Intel i7-8550U (8) @ 4.000GHz .` `/ GPU: NVIDIA GeForce MX150 GPU: Intel UHD Graphics 620 Memory: 14090MiB / 15888MiB I have decided to use Ubuntu 22.04 as a Guest OS as it is one of the most popular and I also wanted to test the new version. The ISO file I used was ubuntu-22.04-desktop-amd64.iso. Some of the above-listed requirements are only available in the latest Kernel and QEMU versions. Here are my other software details:Kernel$ uname -aLinux archlinux 5.15.39-1-lts #1 SMP Thu, 12 May 2022 13:21:59 +0000 x86_64 GNU/LinuxQEMU$ qemu-system-x86_64 --versionQEMU emulator version 7.0.0Copyright (c) 2003-2022 Fabrice Bellard and the QEMU Project developersVirt-Manager$ virt-manager --version4.0.0Install Necessary Software on Host OSThe first step in installing Virt-Manager is to install the virt-manager package itself, along with other additional software. Below is the command I used on Arch Linux:$ sudo pacman -S virt-manager qemu vde2 dnsmasq bridge-utilsVirt-Manager is based on libvirt. Therefore, before proceeding further, we need to enable and start libvirtd services.$ sudo systemctl enable libvirtd$ sudo systemctl start libvirtdYou can check if the service is running using the below command:$ sudo systemctl status libvirtd● libvirtd.service - Virtualization daemon Loaded: loaded (/usr/lib/systemd/system/libvirtd.service; enabled; vendor preset: disabled) Active: active (running) since Sun 2022-05-15 13:07:20 IST; 4h 38min agoTriggeredBy: ● libvirtd.socket ● libvirtd-ro.socket ● libvirtd-admin.socket Docs: man:libvirtd(8) https://libvirt.org Main PID: 23275 (libvirtd) Tasks: 22 (limit: 32768) Memory: 20.7M CPU: 35.944s CGroup: /system.slice/libvirtd.service ├─ 718 /usr/bin/dnsmasq --conf-file=/var/lib/libvirt/dnsmasq/default.conf --leasefile-r&amp;gt; ├─ 719 /usr/bin/dnsmasq --conf-file=/var/lib/libvirt/dnsmasq/default.conf --leasefile-r&amp;gt; └─ 23275 /usr/bin/libvirtd --timeout 120You should also add KVM and libvirt to the user group to make virt-manager work properly. The below command will automatically add a logged-in user to the group.$ sudo usermod -aG $(whoami) libvirt$ sudo usermod -aG $(whoami) kvmDuring my test, I found that if the Guest OS is not able to connect to Host OS, then the Guest OS will not boot and throw you the following error message.Error starting domain: Requested operation is not valid: network &#39;default&#39; is not activeTraceback (most recent call last): File &quot;/usr/share/virt-manager/virtManager/asyncjob.py&quot;, line 72, in cb_wrapper callback(asyncjob, *args, **kwargs) File &quot;/usr/share/virt-manager/virtManager/asyncjob.py&quot;, line 108, in tmpcb callback(*args, **kwargs) File &quot;/usr/share/virt-manager/virtManager/object/libvirtobject.py&quot;, line 57, in newfn ret = fn(self, *args, **kwargs) File &quot;/usr/share/virt-manager/virtManager/object/domain.py&quot;, line 1384, in startup self._backend.create() File &quot;/usr/lib/python3.10/site-packages/libvirt.py&quot;, line 1353, in create raise libvirtError(&#39;virDomainCreate() failed&#39;)libvirt.libvirtError: Requested operation is not valid: network &#39;default&#39; is not activeTo avoid this error, we need to follow a few more additional steps. Go to Virt-Manager GUI –&amp;gt; Edit –&amp;gt; Connection Details –&amp;gt; Virtual Networks –&amp;gt; Auto start –&amp;gt; enable On Boot. Thereafter, issue the following command to ensure the default network is auto-started whenever you boot your system.$ sudo virsh net-autostart defaultNow go ahead and reboot your Host OS / Laptop.Now that we have installed Virt-Manager, we can proceed further to install Ubuntu 22.04 as Guest OS. I used a lot of screenshots for beginners to understand quickly.Install Ubuntu as Guest OS on Virt-ManagerThe first impression after opening the Virt-Manager GUI was not so good. It looked very minimal as compared with Virtual Box. There are just two rows with the name LXC and QEMU/KVM I could see on the Virt-Manager GUI.Virt-Manager GUIYou can add a Virtual Machine by clicking on the + sign as shown below.Add New Virtual MachineThat would bring up a new window as shown below. First, we need to select QEMY/KVM as the connection type. Then select Local install media (ISO image or CDROM) and move forward.Add New Virtual MachineIn the next option window, we need to select ISO and Linux OS or Distro type. There is also an option to detect the OS type automatically. So, I selected the auto option. However, Virt-Manager could not detect the latest ISO automatically and showed me this error.Error Detecting Ubuntu ISO AutomaticallyNow, I had to select the closest Ubuntu version i.e. Ubuntu 21.10. After this, the options window will look like this:Add ISO to Virtual MachineNext, we need to allocate our hardware resources to Virtual Machine Guest OS. It depends on your host OS resource usage. I have 8 processors and 16GB RAM. Therefore, I have provided half of the hardware resources which include 4 processors and 8GB for Ubuntu Guest OS.Provide No of Processors and RAM to VMIn the next window, we need to select HDD space for our Guest OS. You can use either the default location or manage it to point to other filesystem directories. If you have enough space in your root partition, then choose default. I wanted to save the Guest OS file to a different partition. Hence I have chosen Manage.Add HDD Space to UbuntuSelecting Manage brings in to the below option where you can add a new filesystem directory. I created a separate directory called ubuntu22.04 in the target location and allocated 50GB for Guest OS. Finally, your location option should lead to your custom directory.Choose Custom Location HDD SpaceAfter choosing the HDD space, the final window will look like as shown below screenshot. Ensure that your storage path is correct, select the default option for the network under NAT and click the finish button.Review New Guest Virtual Machine OptionsImmediately after clicking on Finish, the Virtual Machine booted from Ubuntu ISO as shown below.Ubuntu Boot MenuThere is one good thing I have observed is that the Guest OS screen was initially restricted to limited space within the VM viewer before installing Ubuntu Guest OS. This you can see in the below image in which arrow free space is indicated with arrows.Ubuntu Guest VM Viewer Before InstallHowever, after installing and rebooting Guest OS, it automatically adjusted to the entire VM viewer screen as shown below. That was good. The same is not possible to achieve under Virtual Box without further tweaking.Ubuntu Guest VM Viewer After InstallSetting Up Shared FolderThis is the difficult part I have encountered during the entire process of configuring Guest OS. Unlike Virtual Box, there is no straight way to insert a folder to share files between Host and Guest OS. The official documentation is too cryptic for beginners. After some research, this is the solution I found. This requires you to perform certain actions both in Host and Guest OSs.On Host OSWe will share a directory called shared from Host to Guest OS. So create a directory and provide the necessary permissions.$ mkdir ~/shared$ sudo chmod 777 -R shared/The shared directory was given all rights to avoid read-only errors from Guest OS. Now open the Virtual Manager viewer for Ubuntu Guest OS and click on the Show Hardware Details option as shown in the below image.Show Hardware DetailsHere we need to set certain options in appropriate locations. Click Add Hardware. Under File System –&amp;gt; select virtio-9p filesystem driver –&amp;gt; provide your Host directory path which you need to share with Guest –&amp;gt; /shared as target path –&amp;gt; click Finish and close the window. Your options should look like the below.VM Shared Folder OptionsOn Ubuntu 22.04 Guest OSWe will be mounting the Host shared folder under ~/shared directory on Guest OS as well. Now, boot your Guest OS and issue the following commands.$ mkdir ~/shared$ sudo mount -t 9p -o trans=virtio /shared ~/shared The above command is to be issued every time you boot into Guest OS.Now onwards you should be able to access all host files under ~/shared on Guest OS. I tried adding some files under Host OS and accessed them via Guest. Again, created a test file on Guest OS and accessed it from Host OS. I also tried sharing NTFS and FAT filesystem to Guest and it worked flawlessly.Guest OS Performance and OpinionThe GoodAfter I installed Ubuntu 22.04 as Guest OS on Virt-Manager, I played around to see its performance. There is no way I can quantity at the moment but the performance seems to be better. There are no lags whatsoever I observed while using the Guest OS. It connected to my Host network and I was able to browse the internet without any issue. While moving around the terminal window and file manager windows through mouse drag, I did not find any lag or pixelisation. I installed a few software, removed some, upgraded OS and all worked nicely.The bidirectional sharing of clipboard content also worked without an issue. I would say that except for the setting up of a shared folder, the rest all worked out of the box.The BadThe biggest issue I found while using Virt-Manager was sharing data between Host and Guest OS. Here, I am not considering the difficulties involved in setting up a shared folder. I copied a directory from Host OS to ~/Documents under Guest OS and measured the time taken to complete the process. The size of this directory is 2.5GB and it contains 17,557 files under various subdirectories. I performed this operation on both Virt-Manager and Virtual Box. Here is the test result: Virt-Manager took 16.32 Min Virtual Box took just 07.17 MinThat is a very bad result for Virt-Manager and did not expect such a poor performance from software maintained by Red Hat.The biggest issue I found is the lack of documentation. Both official and other technical blogposts are not having enough information that will be helpful for new users. Even the blogposts are also too technical to understand immediately and are aimed at intermediate or advanced users.My Final TakeThe Virt-Manager software is officially supported by Red Hat. It is not surprising considering that the KVM itself is supported by the same company. While setting up Virt-Manager, I read a comment posted by a Red Hat engineer while responding to a user in their official forum telling that the Virtual Box for installing Red Hat OS as Guest is not required. They also recommended installing Red Hat Enterprise Linux (RHEL) into Virt-Manager for better performance. I installed RHEL after I set up Ubuntu Guest OS. The performance of RHEL as a Guest OS is also almost the same as Ubuntu 22.04 Guest OS.Considering the process involved, the learning curve required, and poor performance in sharing of data between Host and Guest OS, I will not recommend the Virt-Manager method for installing Guest OS to beginners or alike.You can download this article from here for free." }, { "title": "Install Arch Linux Easiest Way Through GUI and CLI", "url": "/posts/install-arch-linux-easiest-way/", "categories": "Tutorial", "tags": "arch linux, linux, manjaro", "date": "2022-05-07 09:30:00 +0000", "snippet": "Update on Availability of to-arch.sh ScriptThe link to the to-arch.sh script mentioned in this post is vanished. The user account of the author is suspended at https://sr.ht. Whatever the reason may be, the the usefulness of this script will be useful to others who whats to follow the instructions mentioned in this post. Therefore, I have uploaded a copy of this script in to my blog post. You can download the script from here https://wxguy.github.io/assets/downloads/files/to-arch.sh. Since there is no update to this script from the author, I highly recommend to use it on Virtual Box first on a fresh install and on a real hardware thereafter.Why Yet Another Arch Linux Install Tutorial?If I have to say it in two words, the tutorial written here is damn easy and quick.I started using Arch Linux somewhat around 2014. It was new to me migrating to Arch from Ubuntu as many procedures required to be configured manually. I referred Arch Wiki’s famous Beginners Guide to install and configure my system. I had to spend a lot of time reading the wiki to understand and execute commands one by one. It was time-consuming.But now it is 2022, there is no more Beginners Guide in the Arch Wiki. The official installation guide is located at https://wiki.archlinux.org/title/installation_guide and is updated with a lot of content to match the changes in newly included Arch Linux software and components. This time, I do not have time to read and install it. Done some search and research on google and finally fixed this procedure.Enter Arch Linux Through BackdoorThe procedure we will follow here is not to install Arch Linux. We will not even download Arch Linux ISO. Instead, we will install Manjaro Linux and remove Manjaro OS-specific packages and components from the installed system. A question may arise if it is the right thing to do so? The answer to this question is “Absolutely Yes”.For this, you need to understand how this Manjaro Linux or any other derivative Linux distributions are built from its parent distribution. Manjaro claims to be easy to use for beginners and advanced users. To achieve these stated objectives, developers behind Manjaro develop a few GUI tools, artworks, and additional configurations to OS components here and there. They also host all the Arch Linux packages on their repository to control update frequency and delivery of packages to you.If you know what additional packages are built by Manjaro and how to revert to the Arch Linux repo, then you can remove those packages easily and default back to Arch Linux. That is what exactly is done by a little bash utility called to-arch.sh.What is to-arch.sh All About?to-arch.sh is a bash shell script, developed by kskeigrshi. Unlike, most open-source software, this bash script is hosted at https://sr.ht/~kskeigrshi/to-arch.sh/, rather than famous code hosting websites such as GitHub, GitLab, Sourceforge, etc. This script is designed to uninstall all software components installed by Manjaro and rebase the repo back into Arch Linux repositories. While doing so, it will ask a series of questions from users to configure the system properly. In the end, you will get your Arch Linux back while preserving the userland and packages which was installed as part of Manjaro OS.I tested this script around November 2021 (Manjaro KDE) and tried again a few days back (Manjaro Xfce). On both occasions, it worked like a charm. Manjaro installation took around 18 min and reverting to Arch Linux took just 8 min. That is awesome considering hours required for installing Arch Linux manually. In the rest of the article, I will write on steps to be followed to achieve this.System and Software ConfigurationsI have used this script on both real hardware and virtual machine. The script was executed immediately after the installation of Manjaro Linux to avoid potential conflicts at a later stage. Screenshots shared here are taken from Virtual Box, but the is no difference I found under real hardware as well.The Manjaro Linux I tried was version 21.2.6 and the ISO downloaded was manjaro-xfce-21.2.6-220416-linux515.iso.The bash script to-arch.sh version I used was 8.1.1. However, it is highly recommended to download the latest version of the script from https://git.sr.ht/~kskeigrshi/to-arch.sh/refs.Convert Manjaro to Arch Linux The procedure detailed here is not only applicable to Manjaro. The to-arch.sh will also convert Garuda Linux and Endeavour Linux OS.There are many better tutorials available on how to install Manjaro Linux. Here, the focus is to convert Manjaro to Arch Linux. Therefore, I assume that you have already installed Manjaro Linux and booted for the first time. Now head over to https://git.sr.ht/~kskeigrshi/to-arch.sh/refs and click on latest version no and then click on to-arch.sh link which will be available just about sha256:xxxxxxxx... text. If everything goes all right, the to-arch.sh script should have been downloaded to your Downloads directory.Ensure that you have downloaded the script.$ cd ~/Downloads$ lsto-arch.shExecute the script from the Downloads directory.$ bash to-arch.shThe script will ask you to select OS type as shown below. If you are not running as root, it will ask you to provide a sudo password.to-arch.sh: Selection of OS Type and sudo PasswordProviding a sudo password will update the system and automatically identify and inform the user about the type of OS they are running. It will also ask you if pamac is to be removed. Go ahead and say Y to this.to-arch.sh: Confirmation of OS Type and Remove pamacBefore proceeding further, you need to select the Arch Linux repo. For this, to-arch.sh provides you to choose your favorite console-based text editor. I have chosen nano, but you may choose vim if you are comfortable. Once the text editor is enabled, the script will ask you to uncomment the repo URL from the Arch Linux user repository. Scroll down to your nearest country and enable repo. Once the repo is selected, the script will remove all Manjaro-specific components and upgrade the system.At last, you will be asked to provide a choice to install linux or linux-lts. Select your choice.to-arch.sh: User Confirmation to Select Linux TypeI have selected linux-lts. That’s it, the system will be upgraded once again, and all the packages will be downloaded from the newly configured Arch Linux repository. Once all packages are installed, you can reboot your system.Post InstallAfter you reboot your system, you can check if you running Arch or Manjaro Linux by issuing the below command.$ cat /etc/lsb-releaseDISTRIB_ID=&quot;Arch&quot;DISTRIB_RELEASE=&quot;rolling&quot;DISTRIB_DESCRIPTION=&quot;Arch Linux&quot;There is just one small issue I have seen after converting to Arch Linux. There was no icon set for Application Menu in the bottom panel. You can see the issue in the below screenshot.to-arch.sh: Arch Linux Home After Converting from ManjaroThis was seen in both Xfce and KDE editions. I just have set a new icon for the application launcher by right-clicking on it.That’s it. Now onwards, you can proudly say that you are running Arch Linux.You can download this article from here for free." }, { "title": "Deploy Jekyll Website to Github and Godaddy (Custom domain)", "url": "/posts/deploying-jekyll-blog-on-github/", "categories": "Blogging, Tutorial", "tags": "jekyll, github, godaddy", "date": "2022-05-02 14:30:00 +0000", "snippet": "After I wrote my first blog post, I decided to go for pushing it to Github. It took some time to figure out how to do it. So, I decided to document it here.Understand ThemeMost of the tutorials available online about deploying the Jekyll site to GitHub says that you simply push your files to your remote repo and GitHub would automatically build your site. But that is not true for all the themes. Each theme has its workflow as decided by its developers. They are generally documented in their wiki or documentation site. The Jekyll theme I use Chirpy is very well documented and instructions are clear on how to deploy. Therefore, spend some to reading and understanding the workflow mentioned in int documentation https://chirpy.cotes.page.Publishing the local Jekyll site to the remote repo and publishing the same in https://wxguy.github.io involves modification to be done at the local and remote repo. Let’s discuss them one by one.Push Changes to GitHubThis Chirpy theme uses GitHub Actions to generate your site on a remote server. You need to have enough permission to do it in the remote repo. Go to GitHub/username/username.io/settings –&amp;gt; Actions –&amp;gt; General –&amp;gt; Scroll down the page to select “Workflow Permissions” and “Read and write permissions”.There is a shell script deploy.sh under the tools directory that will run on the remote server. After writing your article, you can push local files to remote through git. Firstly, go to the root of your local repo and do the following to initialise your repo and add all files.git initgit add .You can check the status using the git status command. Though you can use git commit -m &#39;Fresh deployment&#39; for staging your commit and git push -u origin master for pushing it to the remote repo, I could not succeed as it did not allow me to do so due to authentication failure. Therefore, I used https://www.gitkraken.com/ Git GUI for pushing the files. I found it convenient and easy to use. It automatically used my ssh key to push the commit which also solved my authentication issue.Changes at GitHub repoOnce the commit is made to GitHub, it will trigger the GitHub Actions workflow. This would run the tools/deploy.sh file on the remote server to generate the site. In my case, the workflow did not completed successfully. Then I went to the remote repo on GitHub and status of run under the Actions tab. I had to rerun the process to complete it successfully. This will create another branch gh-pages in the remote repo. The last step to be forwarded is to set the branch and directory for publishing your site. Go to GitHub repo –&amp;gt; settings – &amp;gt; Pages –&amp;gt; Select gh-pages as a branch and /root as a directory. Ensure to save the changes. That’s it. Wait for a few min. The site username.github.io would be up and running after a few min. It is highly recommended that you clear your cache and cookies before testing your site under https://username.github.io.Enable Custom Domain (Optional)This step is an optional one. If you wish to have your domain display your bog, then it is possible to do by following a few more additional steps. Remember that it cost you money. The first step is to buy a domain. There are many sites where you can buy your custom domain. I have chosen https://www.godaddy.com for the sole reason that it was cheap. You can use any other domain sale related site to purchase a domain name of your interest.I bought http://wxguy.in. I had to modify at two locations to make the site live. Firstly, log in to https://www.godaddy.com and select Manage Domain which you will find under the newly purchased domain id. Then click Domain Settings and then click Manage DNS. Your domain settings will look like the below. Type Name Data TLL A @ custom 600 seconds NS @ ns51.domaincontrol.com. 1 Hour NS @ ns52.domaincontrol.com. 1 Hour CNAME www your-domain-name. 1 Hour CNAME _domainconnect _domainconnect.gd.domaincontrol.com. 1 Hour SOA @ Primary nameserver: ns51.domaincontrol.com. 1 Hour We need to insert four DNS addresses 185.199.108.153, 185.199.109.153, 185.199.110.153, and 185.199.111.153 to point to GitHub. We can edit the first row (Type A) to insert 185.199.108.153. Then add three more additional Type A rows to insert the remaining three IP addresses 185.199.109.153, 185.199.110.153, and 185.199.111.153.Then edit the CNAME row where your-domain-name. is indicated to insert your GitHub pages site name (username.github.io). Do not edit any other fields. The final table would now look like this. Type Name Data TLL A @ 185.199.108.153 600 seconds A @ 185.199.109.153 600 seconds A @ 185.199.110.153 600 seconds A @ 185.199.111.153 600 seconds NS @ ns51.domaincontrol.com. 1 Hour NS @ ns52.domaincontrol.com. 1 Hour CNAME www wxguy.github.io 1 Hour CNAME _domainconnect _domainconnect.gd.domaincontrol.com. 1 Hour SOA @ Primary nameserver: ns51.domaincontrol.com. 1 Hour Now head over to your local repo and create a file called CNAME and write your domain name you have purchased in it ie. wxguy.in. Push the files to GitHub. Wait for a few min to take effect.To check if all the options are loaded properly, you can go to https://who.is and enter your domain name www.wxguy.in in the search field. Once the site is listed click on DNC Records and it should show all the records you have entered on your domain like below.DNS Records for wxguy.in from whois.comAlternatively, you can also check the status using the dig command.$ dig wxguy.in; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.18.2 &amp;lt;&amp;lt;&amp;gt;&amp;gt; wxguy.in;; global options: +cmd;; Got answer:;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 16649;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 1;; OPT PSEUDOSECTION:; EDNS: version: 0, flags:; udp: 512;; QUESTION SECTION:;wxguy.in. IN A;; ANSWER SECTION:wxguy.in. 600 IN A 185.199.108.153wxguy.in. 600 IN A 185.199.111.153wxguy.in. 600 IN A 185.199.110.153wxguy.in. 600 IN A 185.199.109.153;; Query time: 80 msec;; SERVER: 192.168.1.1#53(192.168.1.1) (UDP);; WHEN: Mon May 02 23:09:15 IST 2022;; MSG SIZE rcvd: 101Now onwards, you can access your site on your own domain wxguy.in directly instead of username.github.io. Even if you try to access username.github.io, it will redirect to wxguy.in.You can download this article from here for free." }, { "title": "Creating a personal blog powered by GitHub, Jekyll, and AsciiDoc for free", "url": "/posts/creating-personal-blog-powered-by-github-jekyll-and-asciidoc-for-free/", "categories": "Blogging, Tutorial", "tags": "jekyll, asciidoc, linux, github", "date": "2022-05-01 15:25:00 +0000", "snippet": "MotivationI do keep fiddling with my system to explore new applications and technologies. There are many times, I have to install and reinstall applications and execute the same commands many times. To remember the workflow and commands I used, I generally keep noting down all information in a text file. I also noticed that I do visit various blogs again and again to read the same articles. These articles need not be the same workflow you are using on your system. Therefore, I have decided to create a blog and write it down on it.Options for BloggingThere are many blogging platforms are available to consider for personal blogging which include WordPress, Weebly, medium, blogger, Tumblr etc. I will not go into technical details about each platform. All blogging platforms have their own merits and demerits. However, I have decided to blog on a static site platform so that speed is guaranteed and I need not worry about security issues. Moreover, most of these static sites are generally hosted on code-sharing platforms such as www.github.com, www.gitlab.com etc. That also solves my issue related to server maintenance and the money required to host it. While talking about static site generators for blogging, there are only quite a few technologies available to choose from. Most common are Hugo and Jekyll. After going through their official documentation, available plugins, theme selections, customizations, and support from various blog posts and forums I have decided to choose Jekyll for my blogging purpose.My RequirementsThe starting point for creating my blog was to identify a suitable theme from many themes available on websites listed in Jekyll Website. Before finalising the theme, I have set myself that it should have the following functionalities and options:- Tags for each post Option to specify each post under a certain category Archive section to choose based on year and month Option to enable Dark and light theme Clean, minimal, and good looking Minimal tweaking Ability to write a post using AsciiDoc Provide users to download article in pdf at the end of each page Ability to comment on each post (optional) Search within the website (optional)What I foundTo be honest, it took some time to finalise the theme. Because most of the themes available for Jekyll are awesome. Also, most of my wishes were also present in famous themes. Since I want a bare minimum blog, I decided to go for this Pixyll theme. Pixyll theme looks fantastic but a few important features such as tags and archives were not available in this theme. Later I found this blogpost https://zpbappi.com/jekyll-with-tags-archive-and-comments-in-github-pages/ describing how these options can be enabled manually. So I started writing Python and bash scripts to implement certain additional features in my own way. However, while I was searching for AsciiDoc and Jekyll, I realised that I have to do much more work on Pixyll theme to get what I wanted.That is the time I found this Chirpy theme. It has all the features I wanted in a pre-configured way. The final outcome of my blog setup is the one you are reading now. In the rest of the article, I will write about technical stuff that is required to be followed to make this blog live.PrerequisiteI have installed all the applications and packages on my Arch Linux. The package manager I use is paru as it has the ability to install packages from aur repositories. You can also use pacman instead. If you are using any other Distribution such as Ubuntu, Open Suse, Debian, etc, you have to use google to find equal command-line options.Install all necessary libraries and packagessudo paru -Sy ruby base-devel git The AsciiDoctor framework is not always updated with the phase of the latest ruby release. However, Arch Linux always installs the latest version of ruby. To avoid incompatibilities, between ruby and AsciiDoctor, it is recommended to use Ruby Version Manager (rvm) from https://rvm.io/. Installation instructions are also listed on the website. I have installed ruby 3.0 on my machine.Install gem packagesgem install exec jekyll bundlerClone the Chirpy theme started repo by clicking on it. Name the repo as username.github.io and in my case, I entered wxguy.github.io Once I created the remote repo, I cloned it to the local machine for further modification.cd /path/to/your/locationgit clone https://github.com/wxguy/wxguy.github.io.gitMove into the newly created wxguy.github.io blog site directory and ensure that Gemfile exists.cd wxguy.github.iols GemfileIn addition to markdown, I want Jekyll to render AsciiDoc files for blog posts. This is possible only through installing Jekyll plugins. Therefore, I edited the Gemfile by appending the following lines at the end.group :jekyll_plugins dogem &quot;jekyll-asciidoc&quot;gem &quot;jekyll-paginate&quot;gem &quot;jekyll-redirect-from&quot;gem &quot;jekyll-seo-tag&quot;gem &quot;jekyll-archives&quot;gem &quot;jekyll-sitemap&quot;endInstall all plugins required for using the Chirpy theme. It may take a few min, depending on your network speed.bundle install Before adding content and start your server, you may consider executing git config --global --add safe.directory /path/to//wxguy.github.io command. This will give you write permission to all files and edit files from dirrent OS.Start the server using the below Jekyll command.bundle exec jekyll serve --watchIf everything goes well, you can access the newly created website through the URL http://127.0.0.1:4000/ on your favorite web browser. However, at this stage, it will show any post as we have not written any post inside the _posts directory.Modify Site SettingsBefore you start your blog post, you need to amend some variables in _config.yml file. The comments provided in the file are self-explanatory and modified as per your requirement. I have modified the following variables:-title:tagline:description:timezone:url:github: username:social :name:social :email:social :links :github:google_analytics :id:avatar:paginate:The variable avatar is required to display your profile image. You need to provide a path to your profile image for this. I created a directory called img under assets and placed my profile picture called avatar.png. Reloading the site showed my profile image in the sidebar.If you wish to display the favicon image to be displayed in the current tab, then read this article https://chirpy.cotes.page/posts/customize-the-favicon/.Change Site FontI like the way content is presented in https://beautifuljekyll.com/ blog. It uses Lora and Times New Roman to display the content. To implement the same in my blog, I created a style.css file under the assets/css directory and added the below content.------/* If the number of TAB files has changed, the following variable is required. And it must be defined before `@import`.*/$tab-count: {{ site.tabs | size | plus: 1 }}; // plus 1 for home tab@import &quot;{{ site.theme }}&quot;;/* append your custom style below */html { font-size: 92%}body { font-family: &#39;Lora&#39;, &#39;Times New Roman&#39;, serif; font-size: 130%}h1 { font-family: &#39;Lora&#39;, &#39;Times New Roman&#39;, serif; font-size: 1.9rem;}h2 { font-family: &#39;Lora&#39;, &#39;Times New Roman&#39;, serif; font-size: 1.5rem;}h3 { font-family: &#39;Lora&#39;, &#39;Times New Roman&#39;, serif; font-size: 1.2rem;}h4 { font-family: &#39;Lora&#39;, &#39;Times New Roman&#39;, serif; font-size: 1.15rem;}h5 { font-family: &#39;Lora&#39;, &#39;Times New Roman&#39;, serif; font-size: 1.1rem;}This ensured that text is changed on the main body and headings to make it uniform.Start BloggingThe documentation section of this theme is pretty good. It is recommended that you read write new post and text and typography pages before writing your first blog post. You need to spend some time to ensure to make all the corrections properly. Please view your post changes in Google Chrome or Chromium. On my system Firefox did not display the site properly. It is also recommanded to review the generated site on Private mode to ensure that cookies and cache files are not creating an issue.You can download this article from here for free." } ]
